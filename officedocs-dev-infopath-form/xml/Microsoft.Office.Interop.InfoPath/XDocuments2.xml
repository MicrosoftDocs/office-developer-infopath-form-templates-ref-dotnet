<Type Name="XDocuments2" FullName="Microsoft.Office.Interop.InfoPath.XDocuments2">
  <TypeSignature Language="C#" Value="public interface XDocuments2 : Microsoft.Office.Interop.InfoPath.XDocuments" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract XDocuments2 implements class Microsoft.Office.Interop.InfoPath.XDocuments" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Office.Interop.InfoPath.XDocuments2" />
  <TypeSignature Language="VB.NET" Value="Public Interface XDocuments2&#xA;Implements XDocuments" />
  <TypeSignature Language="C++ CLI" Value="public interface class XDocuments2 : Microsoft::Office::Interop::InfoPath::XDocuments" />
  <TypeSignature Language="F#" Value="type XDocuments2 = interface&#xA;    interface XDocuments" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Office.Interop.InfoPath</AssemblyName>
    <AssemblyVersion>15.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.Office.Interop.InfoPath.XDocuments</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.Guid("096CD647-0786-11D1-95FA-0080C78EE3BB")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.TypeLibType(4288)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>This type is a wrapper for a COM interface implemented by a coclass that is required by managed code for COM interoperability. To access the members specified by this interface, use the type that wraps the coclass that implements this interface. For information about that type, including usage, remarks, and examples, see<see cref="T:Microsoft.Office.Interop.InfoPath.XDocumentsCollection" />.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close (object varIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Close([in]object varIndex) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.InfoPath.XDocuments2.Close(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close (varIndex As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close(System::Object ^ varIndex);" />
      <MemberSignature Language="F#" Value="abstract member Close : obj -&gt; unit" Usage="xDocuments2.Close varIndex" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Office.Interop.InfoPath.XDocuments.Close(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.InfoPath</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(4)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="varIndex" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="varIndex">An expression that specifies the position of a member of the <see cref="T:Microsoft.Office.Interop.InfoPath.XDocumentsCollection" />. If a numeric expression, the argument must be a number from 0 to the value of the <see cref="P:Microsoft.Office.Interop.InfoPath.XDocuments2.Count" /> minus 1. If a string expression, the argument must be the Uniform Resource Locator (URL) path of a member of the collection.</param>
        <summary>Closes the specified Microsoft Office InfoPath form.</summary>
        <remarks>
          <para>The <b>Close</b> method closes the currently open form without quitting the InfoPath application. The form is closed unconditionally, meaning that any changes made to the data in the form are not saved.</para>
          <para />
        </remarks>
        <example>
          <code>thisApplication.XDocuments.&lt;span class="label"&gt;Close&lt;/span&gt;(0);</code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.InfoPath.XDocuments2.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="Microsoft.Office.Interop.InfoPath.XDocuments2.Count" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.Office.Interop.InfoPath.XDocuments.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.InfoPath</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(1)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a count of the number of <see cref="T:Microsoft.Office.Interop.InfoPath.XDocument" /> objects contained in the collection.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <example>
          <para>In the following example, the <b>Count</b> property of the <b>XDocuments</b> collection is used within a for loop to iterate through the collection of <b>XDocument</b> objects and display a message box indicating the Uniform Resource Identifier (URI) location for each currently open form:</para>
          <code>for (int i=0; i &amp;lt; thisApplication.XDocuments.&lt;span class="label"&gt;Count&lt;/span&gt;; i++)
{
   thisXDocument.UI.Alert("XDocument URI: " + thisApplication.XDocuments[i].URI);
}</code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.IEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IEnumerator GetEnumerator() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.InfoPath.XDocuments2.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::IEnumerator ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="abstract member GetEnumerator : unit -&gt; System.Collections.IEnumerator" Usage="xDocuments2.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Office.Interop.InfoPath.XDocuments.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.InfoPath</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(-4)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(1)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gets an <b>IEnumerator</b> that iterates over all entries in the <see cref="T:Microsoft.Office.Interop.InfoPath.XDocumentsCollection" /> object.</summary>
        <returns>An <b>IEnumerator</b> that iterates over all entries in the <see cref="T:Microsoft.Office.Interop.InfoPath.XDocumentsCollection" /> object.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.InfoPath.XDocument this[object varIndex] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.InfoPath.XDocument Item(object)" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.InfoPath.XDocuments2.Item(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Item(varIndex As Object) As XDocument" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::InfoPath::XDocument ^ default[System::Object ^] { Microsoft::Office::Interop::InfoPath::XDocument ^ get(System::Object ^ varIndex); };" />
      <MemberSignature Language="F#" Value="member this.Item(obj) : Microsoft.Office.Interop.InfoPath.XDocument" Usage="Microsoft.Office.Interop.InfoPath.XDocuments2.Item" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.Office.Interop.InfoPath.XDocuments.Item(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.InfoPath</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.InfoPath.XDocument</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="varIndex" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="varIndex">An expression that specifies the position of a member of the <see cref="T:Microsoft.Office.Interop.InfoPath.XDocumentsCollection" />. If a numeric expression, the argument must be a number from 0 to the value of the <see cref="P:Microsoft.Office.Interop.InfoPath.XDocuments2.Count" /> minus 1. If a string expression, the argument must be the Uniform Resource Locator (URL) path of a member of the collection.</param>
        <summary>Gets a reference to the specified <see cref="T:Microsoft.Office.Interop.InfoPath.XDocument" /> object from the collection.</summary>
        <value>To be added.</value>
        <remarks>
          <para>If the value provided for the <paramref name="varIndex" /> argument does not match any existing member of the collection, an error occurs.</para>
          <para>After you have set a reference to the <b>XDocument</b> object that the <b>Item</b> property returns, you can access any of its properties or methods.</para>
          <para />
        </remarks>
        <example>
          <para>Because the <b>Item</b> property is the default property of the <see cref="T:Microsoft.Office.Interop.InfoPath.XDocumentsCollection" /> collection, it can be used as follows:</para>
          <code>XDocument firstDocument;
firstDocument = thisApplication.XDocuments[0];</code>
          <para>You can use the name of the <b>XDocument</b> as the argument to the <b>Item</b> method, as shown in the following example:</para>
          <code>XDocument myFormDocument;
myFormDocument = thisApplication.XDocuments[@"C:\MyForm.xml"];</code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="New">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.InfoPath.XDocument New (object varURI, int dwBehavior = 1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Office.Interop.InfoPath.XDocument New([in]object varURI, [in]int32 dwBehavior) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.InfoPath.XDocuments2.New(System.Object,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function New (varURI As Object, Optional dwBehavior As Integer = 1) As XDocument" />
      <MemberSignature Language="F#" Value="abstract member New : obj * int -&gt; Microsoft.Office.Interop.InfoPath.XDocument" Usage="xDocuments2.New (varURI, dwBehavior)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Office.Interop.InfoPath.XDocuments.New(System.Object,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.InfoPath</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.InfoPath.XDocument</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="varURI" Type="System.Object" />
        <Parameter Name="dwBehavior" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="varURI">Specifies the Uniform Resource Identifier (URI) of a form.</param>
        <param name="dwBehavior">Default value is 1. A value that specifies how the form should be opened. The values are based on the <see cref="T:Microsoft.Office.Interop.InfoPath.XdDocumentVersionMode" /> enumeration.</param>
        <summary>Creates a new Microsoft Office InfoPath form based on the specified form.</summary>
        <returns>An <see cref="T:Microsoft.Office.Interop.InfoPath._XDocument" /> object.</returns>
        <remarks>
          <para>The <b>New</b> method can only be used to create a new form based on an existing form; it cannot be used to create a new form based on a form template. To create a form from a form template, use the <see cref="M:Microsoft.Office.Interop.InfoPath.XDocuments2.NewFromSolution(System.Object)" /> method.</para>
          <para>When you use the <b>New</b> method, the new form opens in InfoPath and is ready to be filled out.</para>
          <para />
        </remarks>
        <example>
          <para>In the following example, the <b>New</b> method of the <see cref="T:Microsoft.Office.Interop.InfoPath.XDocumentsCollection" /> collection is passed the URI of an existing form, and a new form is created and its associated <see cref="T:Microsoft.Office.Interop.InfoPath._XDocument" /> object returned:</para>
          <code>XDocument newDocument;
newDocument = thisApplication.XDocuments.&lt;span class="label"&gt;New&lt;/span&gt;(@"C:\MyForm.xml", 1);</code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="NewFromSolution">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.InfoPath.XDocument NewFromSolution (object varURI);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Office.Interop.InfoPath.XDocument NewFromSolution([in]object varURI) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.InfoPath.XDocuments2.NewFromSolution(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function NewFromSolution (varURI As Object) As XDocument" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::Office::Interop::InfoPath::XDocument ^ NewFromSolution(System::Object ^ varURI);" />
      <MemberSignature Language="F#" Value="abstract member NewFromSolution : obj -&gt; Microsoft.Office.Interop.InfoPath.XDocument" Usage="xDocuments2.NewFromSolution varURI" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Office.Interop.InfoPath.XDocuments.NewFromSolution(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.InfoPath</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(5)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.InfoPath.XDocument</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="varURI" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="varURI">Specifies the Uniform Resource Identifier (URI) of a form.</param>
        <summary>Creates a new Microsoft Office InfoPath form based on the specified form template.</summary>
        <returns>An <see cref="T:Microsoft.Office.Interop.InfoPath._XDocument" /> object.</returns>
        <remarks>
          <para>The <b>NewFromSolution</b> method can only be used to create a new form based on an existing form template; it cannot be used to create a new form based on a form. To create a form from an existing form, use the <see cref="M:Microsoft.Office.Interop.InfoPath.XDocuments2.New(System.Object,System.Int32)" /> method.</para>
          <para>When you use the <b>NewFromSolution</b> method, the new form opens in InfoPath and is ready to be filled out.</para>
          <para />
        </remarks>
        <example>
          <para>In the following example, the <b>NewFromSolution</b> method of the <see cref="T:Microsoft.Office.Interop.InfoPath.XDocumentsCollection" /> collection is passed the URI of an existing form template, and a new form is created and its associated <see cref="T:Microsoft.Office.Interop.InfoPath._XDocument" /> object returned:</para>
          <code>XDocument newDocument;

newDocument = thisApplication.XDocuments. &lt;span class="label"&gt;NewFromSolution&lt;/span&gt; (@"C:\MyForm.xsn");</code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="NewFromSolutionWithData">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.InfoPath.XDocument NewFromSolutionWithData (object varXMLData, object varSolutionURI, int dwBehavior = 1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Office.Interop.InfoPath.XDocument NewFromSolutionWithData([in]object varXMLData, [in]object varSolutionURI, [in]int32 dwBehavior) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.InfoPath.XDocuments2.NewFromSolutionWithData(System.Object,System.Object,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function NewFromSolutionWithData (varXMLData As Object, varSolutionURI As Object, Optional dwBehavior As Integer = 1) As XDocument" />
      <MemberSignature Language="F#" Value="abstract member NewFromSolutionWithData : obj * obj * int -&gt; Microsoft.Office.Interop.InfoPath.XDocument" Usage="xDocuments2.NewFromSolutionWithData (varXMLData, varSolutionURI, dwBehavior)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.InfoPath</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(6)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.InfoPath.XDocument</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="varXMLData" Type="System.Object" />
        <Parameter Name="varSolutionURI" Type="System.Object" />
        <Parameter Name="dwBehavior" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="varXMLData">Provides the XML data to be used as a template for the form. Can be a string that specifies the Uniform Resource Identifier (URI) of an XML document, or an <b>XMLDOMNode</b> that contains the XML to be used as the XML document (template).</param>
        <param name="varSolutionURI">Specifies the Uniform Resource Identifier (URI) of a form template file (an .xsf or .xsn file).</param>
        <param name="dwBehavior">Reserved for future use. This value should be set to 1.</param>
        <summary>Creates a new Microsoft Office InfoPath form using the specified XML data and form template.</summary>
        <returns>An <see cref="T:Microsoft.Office.Interop.InfoPath._XDocument" /> object.</returns>
        <remarks>
          <para>The following related methods of the XDocuments collection are also available:</para>
          <list type="bullet">
            <item>
              <description>The <see cref="M:Microsoft.Office.Interop.InfoPath.XDocuments2.New(System.Object,System.Int32)" /> method enables creating a new instance of InfoPath by using a specified XML document. The XML document must correspond to an InfoPath form. A new form is opened in InfoPath, using the supplied XML document as initial data, and its associated form template as specified in the processing instructions in the header of the document.</description>
            </item>
            <item>
              <description>The <see cref="M:Microsoft.Office.Interop.InfoPath.XDocuments2.NewFromSolution(System.Object)" /> method enables creating a new instance of InfoPath using a specified form template, and its associated XML form (the initial template data). </description>
            </item>
          </list>
          <para>The <b>NewFromSolutionWithData</b> method supports a scenario that is not provided by the foregoing two methods: specifying both the XML document used as initial data and the form template. The XML document does not need to have been created by InfoPath. It can be supplied either as a URI or as an <b>XMLDOMNode</b>.</para>
          <para>When you use the <b>NewFromSolutionWithData</b> method, the new form opens in InfoPath and is ready to be filled out.</para>
          <para />
        </remarks>
        <example>
          <para>Example 1:</para>
          <code>// open a solution from an XML DOM
// Create a new DOM 
IXMLDOMDocument newDoc=thisXDocument.CreateDOM();
//Load DOM with some XML
string myXml="&amp;lt;person&amp;gt;&amp;lt;firstName/&amp;gt;&amp;lt;lastName/&amp;gt;&amp;lt;address/&amp;gt;&amp;lt;city/&amp;gt;&amp;lt;country/&amp;gt;&amp;lt;/person&amp;gt;”;
newDoc.loadXML(myXml);
// Call NewSolutionWithData to open a new Form and load the XML
// the solution to edit the xml was published on SharePoint thisApplication.XDocuments.&lt;span class="label"&gt;NewFromSolutionWithData&lt;/span&gt;(newDoc.documentElement,"http://localhost/Sample/forms/template.xsn",(int)XdDocumentVersionMode.xdFailOnVersionOlder);</code>
          <para>Example 2:</para>
          <code>// Open a solution from an xml file on disc
// the solution to edit the xml was published on SharePoint thisApplication.XDocuments.&lt;span class="label"&gt;NewFromSolutionWithData&lt;/span&gt;(“c:\\myXmlFiles\\Sample.xml”,"http://localhost/Sample/forms/template.xsn",(int)XdDocumentVersionMode.xdFailOnVersionOlder);</code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.InfoPath.XDocument Open (object varURI, int dwBehavior = 1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Office.Interop.InfoPath.XDocument Open([in]object varURI, [in]int32 dwBehavior) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.InfoPath.XDocuments2.Open(System.Object,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Open (varURI As Object, Optional dwBehavior As Integer = 1) As XDocument" />
      <MemberSignature Language="F#" Value="abstract member Open : obj * int -&gt; Microsoft.Office.Interop.InfoPath.XDocument" Usage="xDocuments2.Open (varURI, dwBehavior)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Office.Interop.InfoPath.XDocuments.Open(System.Object,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.InfoPath</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(3)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.InfoPath.XDocument</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="varURI" Type="System.Object" />
        <Parameter Name="dwBehavior" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="varURI">Specifies the Uniform Resource Identifier (URI) of a form.</param>
        <param name="dwBehavior">Default value is 1. A value that specifies how the form should be opened. The values are based on the <see cref="T:Microsoft.Office.Interop.InfoPath.XdDocumentVersionMode" /> enumeration.</param>
        <summary>Opens the specified Microsoft Office InfoPath form.</summary>
        <returns>An <see cref="T:Microsoft.Office.Interop.InfoPath._XDocument" /> object.</returns>
        <remarks>
          <para>The <b>Open</b> method can only be used to open a form; it cannot be used to open a form template. To create a form from a form template, use the <see cref="M:Microsoft.Office.Interop.InfoPath.XDocuments2.NewFromSolution(System.Object)" /> method. To create a form based on an existing form, use the <see cref="M:Microsoft.Office.Interop.InfoPath.XDocuments2.New(System.Object,System.Int32)" /> method.</para>
          <para>When you use the <b>Open</b> method, the specified form opens in InfoPath and is ready to be filled out.</para>
          <para />
        </remarks>
        <example>
          <para>In the following example, the <b>Open</b> method of the <see cref="T:Microsoft.Office.Interop.InfoPath.XDocumentsCollection" /> collection is passed the URI of an existing form, and the form is opened and its associated <see cref="T:Microsoft.Office.Interop.InfoPath._XDocument" /> object returned:</para>
          <code>XDocument document;
document = thisApplication.XDocuments.&lt;span class="label"&gt;Open&lt;/span&gt;(@"C:\MyForm.xml", 1);</code>
        </example>
      </Docs>
    </Member>
  </Members>
</Type>