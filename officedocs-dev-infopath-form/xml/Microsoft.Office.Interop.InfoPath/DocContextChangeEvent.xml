<Type Name="DocContextChangeEvent" FullName="Microsoft.Office.Interop.InfoPath.DocContextChangeEvent">
  <TypeSignature Language="C#" Value="public interface DocContextChangeEvent : Microsoft.Office.Interop.InfoPath.DocEvent" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract DocContextChangeEvent implements class Microsoft.Office.Interop.InfoPath.DocEvent" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Office.Interop.InfoPath.DocContextChangeEvent" />
  <TypeSignature Language="VB.NET" Value="Public Interface DocContextChangeEvent&#xA;Implements DocEvent" />
  <TypeSignature Language="C++ CLI" Value="public interface class DocContextChangeEvent : Microsoft::Office::Interop::InfoPath::DocEvent" />
  <TypeSignature Language="F#" Value="type DocContextChangeEvent = interface&#xA;    interface DocEvent" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Office.Interop.InfoPath</AssemblyName>
    <AssemblyVersion>15.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.Office.Interop.InfoPath.DocEvent</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.Guid("096CD6D2-0786-11D1-95FA-0080C78EE3BB")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.TypeLibType(4288)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>This type is a wrapper for a COM interface implemented by a coclass that is required by managed code for COM interoperability. To access the members specified by this interface, use the type that wraps the coclass that implements this interface. For information about that type, including usage, remarks, and examples, see<see cref="T:Microsoft.Office.Interop.InfoPath.DocContextChangeEventObject" />.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Context">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.InfoPath.Xml.IXMLDOMNode Context { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.InfoPath.Xml.IXMLDOMNode Context" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.InfoPath.DocContextChangeEvent.Context" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Context As IXMLDOMNode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::InfoPath::Xml::IXMLDOMNode ^ Context { Microsoft::Office::Interop::InfoPath::Xml::IXMLDOMNode ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Context : Microsoft.Office.Interop.InfoPath.Xml.IXMLDOMNode" Usage="Microsoft.Office.Interop.InfoPath.DocContextChangeEvent.Context" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.InfoPath</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(1)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.InfoPath.Xml.IXMLDOMNode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a reference to the XML Document Object Model (DOM) node that is the new context node provided by <see cref="T:Microsoft.Office.Interop.InfoPath.DocContextChangeEventObject" /> object.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <example>
          <para>In the following example, a node named <paramref name="lastChanged" /> is updated in response to context changes:</para>
          <code>public void OnContextChange(DocContextChangeEvent e)
{
 if ( e.Type == "ContextNode" &amp;amp;&amp;amp; !e.IsUndoRedo )
 {
  IXMLDOMNode contextNode = e.&lt;span class="label"&gt;Context&lt;/span&gt;;
  IXMLDOMNode lastChangedNode = thisXDocument.DOM.selectSingleNode("my:lastChanged");
  lastChangedNode.text = contextNode.nodeName;
 }
}</code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="IsUndoRedo">
      <MemberSignature Language="C#" Value="public bool IsUndoRedo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsUndoRedo" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.InfoPath.DocContextChangeEvent.IsUndoRedo" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsUndoRedo As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsUndoRedo { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsUndoRedo : bool" Usage="Microsoft.Office.Interop.InfoPath.DocContextChangeEvent.IsUndoRedo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.InfoPath</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(3)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(3)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the context change event occurred in response to undoing an operation or redoing an operation.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <example>
          <para>In the following example, a node named <paramref name="lastChanged" /> is updated in response to context changes not related to undo and redo:</para>
          <code>public void OnContextChange(DocContextChangeEvent e)
{
 if ( e.Type == "ContextNode" &amp;amp;&amp;amp; !e.&lt;span class="label"&gt;IsUndoRedo&lt;/span&gt; )
 {
  IXMLDOMNode contextNode = e.Context;
  IXMLDOMNode lastChangedNode = thisXDocument.DOM.selectSingleNode("/my:root/my:lastChanged");
  lastChangedNode.text = contextNode.nodeName;
 }
}</code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="Type">
      <MemberSignature Language="C#" Value="public string Type { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Type" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.InfoPath.DocContextChangeEvent.Type" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Type As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Type { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Type : string" Usage="Microsoft.Office.Interop.InfoPath.DocContextChangeEvent.Type" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.InfoPath</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(2)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the type of context change event that occurred when the <see cref="E:Microsoft.Office.Interop.InfoPath._XDocumentEventSink2_Event.OnContextChange" /> event was triggered.</summary>
        <value>To be added.</value>
        <remarks>
          <para>The <b>Type</b> property returns only the value "ContextNode" for context changes in Microsoft InfoPath 2003 Service Pack 1. Nevertheless, if code in an event handler performs actions that depend on current functionality, that code should still be designed to check the value of the Type property, because future versions of InfoPath may use different values for different context changes.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XDocument">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.InfoPath.XDocument XDocument { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.InfoPath.XDocument XDocument" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.InfoPath.DocContextChangeEvent.XDocument" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property XDocument As XDocument" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::InfoPath::XDocument ^ XDocument { Microsoft::Office::Interop::InfoPath::XDocument ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.XDocument : Microsoft.Office.Interop.InfoPath.XDocument" Usage="Microsoft.Office.Interop.InfoPath.DocContextChangeEvent.XDocument" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.Office.Interop.InfoPath.DocEvent.XDocument</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.InfoPath</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(100)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(100)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.InfoPath.XDocument</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a reference to the <see cref="T:Microsoft.Office.Interop.InfoPath.XDocument" /> object that is associated with the <see cref="T:Microsoft.Office.Interop.InfoPath.DocContextChangeEventObject" /> object in an <see cref="E:Microsoft.Office.Interop.InfoPath._XDocumentEventSink2_Event.OnContextChange" /> event.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
