<Type Name="ADOAdapter2" FullName="Microsoft.Office.Interop.InfoPath.ADOAdapter2">
  <TypeSignature Language="C#" Value="public interface ADOAdapter2 : Microsoft.Office.Interop.InfoPath.ADOAdapter" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ADOAdapter2 implements class Microsoft.Office.Interop.InfoPath.ADOAdapter" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Office.Interop.InfoPath.ADOAdapter2" />
  <TypeSignature Language="VB.NET" Value="Public Interface ADOAdapter2&#xA;Implements ADOAdapter" />
  <TypeSignature Language="C++ CLI" Value="public interface class ADOAdapter2 : Microsoft::Office::Interop::InfoPath::ADOAdapter" />
  <TypeSignature Language="F#" Value="type ADOAdapter2 = interface&#xA;    interface ADOAdapter" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Office.Interop.InfoPath</AssemblyName>
    <AssemblyVersion>15.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.Office.Interop.InfoPath.ADOAdapter</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.Guid("096CD5D3-0786-11D1-95FA-0080C78EE3BB")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.TypeLibType(4288)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>This type is a wrapper for a COM interface implemented by a coclass that is required by managed code for COM interoperability. To access the members specified by this interface, use the type that wraps the coclass that implements this interface. For information about that type, including usage, remarks, and examples, see<see cref="T:Microsoft.Office.Interop.InfoPath.ADOAdapterObject" />.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="BuildSQLFromXMLNodes">
      <MemberSignature Language="C#" Value="public string BuildSQLFromXMLNodes (Microsoft.Office.Interop.InfoPath.Xml.IXMLDOMNode pXmlNode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string BuildSQLFromXMLNodes([in]class Microsoft.Office.Interop.InfoPath.Xml.IXMLDOMNode pXmlNode) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.InfoPath.ADOAdapter2.BuildSQLFromXMLNodes(Microsoft.Office.Interop.InfoPath.Xml.IXMLDOMNode)" />
      <MemberSignature Language="VB.NET" Value="Public Function BuildSQLFromXMLNodes (pXmlNode As IXMLDOMNode) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ BuildSQLFromXMLNodes(Microsoft::Office::Interop::InfoPath::Xml::IXMLDOMNode ^ pXmlNode);" />
      <MemberSignature Language="F#" Value="abstract member BuildSQLFromXMLNodes : Microsoft.Office.Interop.InfoPath.Xml.IXMLDOMNode -&gt; string" Usage="aDOAdapter2.BuildSQLFromXMLNodes pXmlNode" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Office.Interop.InfoPath.ADOAdapter.BuildSQLFromXMLNodes(Microsoft.Office.Interop.InfoPath.Xml.IXMLDOMNode)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.InfoPath</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(8)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pXmlNode" Type="Microsoft.Office.Interop.InfoPath.Xml.IXMLDOMNode" />
      </Parameters>
      <Docs>
        <param name="pXmlNode">The XML node to be converted to an SQL fragment.</param>
        <summary>Returns a SQL command text fragment using the specified XML node.</summary>
        <returns>A SQL command text fragment.</returns>
        <remarks>
          <para>The fragment of SQL that the <b>BuildSQLFromXMLNodes</b> method generates is an SQL WHERE clause in the form of field = value. The XML node that you use for the <paramref name="pXmlNode" /> argument should be a descendant of the <paramref name="dfs:queryFields" /> node; when you have the SQL command text fragment, you can add it to the existing SQL command string of the <see cref="T:Microsoft.Office.Interop.InfoPath.ADOAdapterObject" /> object using the <see cref="P:Microsoft.Office.Interop.InfoPath.ADOAdapter2.Command" /> property.</para>
          <para />
        </remarks>
        <example>
          <para>In the following example, the <b>BuildSQLFromXMLNodes</b> method is used to query the Orders table of the Northwind database. The data returned is filtered for items greater than or equal to the value of the <paramref name="queryFieldNode" />:</para>
          <code>private void QueryGreaterThan()
{    
 string oldCommand;
 string whereClause;
 IXMLDOMNode queryFieldNode;
 IXMLDOMNode curQueryFieldAttribute;
 IXMLDOMNamedNodeMap queryFieldAttributes;
 ADOAdapter adapter = (ADOAdapter)thisXDocument.QueryAdapter;

 // Build the WHERE clause from the QueryFields in the form's
 // underlying XML DOM.
 queryFieldNode = thisXDocument.DOM.selectSingleNode("dfs:myFields/dfs:queryFields/q:Orders");
 whereClause = adapter.&lt;span class="label"&gt;BuildSQLFromXMLNodes&lt;/span&gt;(queryFieldNode);

// The QueryFields are empty.
 if (whereClause == null)
 {
  whereClause = String.Empty;
 }
 // Replace the '=' signs with '&amp;gt;=', and append the clause to 
 // the SQL command text.
 whereClause = whereClause.Replace(@"=", @"&amp;gt;=");
 oldCommand = adapter.Command;
 
 if (whereClause != "")
 {
  adapter.Command = oldCommand + " where " + whereClause;
 }
 
 // Clear the QueryFields so the WHERE clause isn't 
 // automatically generated.
 queryFieldAttributes = queryFieldNode.attributes;
 while ((curQueryFieldAttribute = queryFieldAttributes.nextNode()) != null)
 {
  curQueryFieldAttribute.text = "";
 }

  // Perform the query.
 try
 {
  thisXDocument.Query();
 }
 catch (Exception ex)
 {
  thisXDocument.UI.Alert("Failed to query.\n\n" + ex.Message);
 }

 // Reset the command so that subsequent queries are based on 
 // the correct SQL command text string.
 adapter.Command = oldCommand;
}</code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="Command">
      <MemberSignature Language="C#" Value="public string Command { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Command" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.InfoPath.ADOAdapter2.Command" />
      <MemberSignature Language="VB.NET" Value="Public Property Command As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Command { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Command : string with get, set" Usage="Microsoft.Office.Interop.InfoPath.ADOAdapter2.Command" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.Office.Interop.InfoPath.ADOAdapter.Command</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.InfoPath</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(6)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(6)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(6)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the SQL command string text for an <see cref="T:Microsoft.Office.Interop.InfoPath.ADOAdapterObject" /> object.</summary>
        <value>To be added.</value>
        <remarks>
          <para>The <b>Command</b> property of the <b>ADOAdapter</b> object contains the SQL command text that is used by the ADO data adapter to submit data to and retrieve data from an ActiveX Data Objects/OLEDB external data source.</para>
          <para>
            <b>Note</b>: The <b>ADOAdapter</b> object is limited to work only with Microsoft SQL Server and Microsoft Access databases.</para>
          <para />
        </remarks>
        <example>
          <para>In the following example, the <b>Command</b> property of the <b>ADOAdapter</b> object is used to query the Employees table of the Northwind database through the secondary data source "Employees." The <paramref name="EmployeeID" /> of the record returned matches the value of the <paramref name="my:field2" /> node. This example requires <paramref name="my:field2" /> in the main data source and bound to a text box in a view that contains a button to invoke the following code:</para>
          <code>// retrieve the Employees Adapter from the DataAdapters collection
ADOAdapter employeesDA = (ADOAdapter)thisXDocument.DataAdapters["Employees"];
// get employee’s ID from the main DOM
string employeeID = thisXDocument.DOM.selectSingleNode("//my:field2").text;
// Change the ADOAdapter’s command to retrieve the record of the Employee’s ID entered
// by the user
employeesDA.&lt;span class="label"&gt;Command &lt;/span&gt;= "select * from Employees where EmployeeID = " + employeeID;
// get DataObject from the DataObjects collection and call Query to refresh
// the data object
DataObject employeesDO = thisXDocument.DataObjects["Employees"];
employeesDO.Query();</code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="Connection">
      <MemberSignature Language="C#" Value="public string Connection { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Connection" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.InfoPath.ADOAdapter2.Connection" />
      <MemberSignature Language="VB.NET" Value="Public Property Connection As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Connection { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Connection : string with get, set" Usage="Microsoft.Office.Interop.InfoPath.ADOAdapter2.Connection" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.Office.Interop.InfoPath.ADOAdapter.Connection</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.InfoPath</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(5)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(5)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(5)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the connection string used for an <see cref="T:Microsoft.Office.Interop.InfoPath.ADOAdapterObject" /> object.</summary>
        <value>To be added.</value>
        <remarks>
          <para>The <b>Connection</b> property of the <b>ADOAdapter</b> object contains the connection string that is used by the ADO data adapter to connect to an ActiveX Data Objects/OLEDB external data source.</para>
          <para>
            <b>Note</b>: The <b>ADOAdapter</b> object is limited to work only with Microsoft SQL Server and Microsoft Access databases. </para>
          <para />
        </remarks>
        <example>
          <code>// retrieve the Employees Adapter from the DataAdapters collection
ADOAdapter employeesDA = (ADOAdapter)thisXDocument.DataAdapters["Employees"];
// Get new server name from the main DOM
string newServer = thisXDocument.DOM.selectSingleNode("//my:serverName").text;
// build new connection string
string connectionString = "Provider=SQLOLEDB.1;Integrated Security=SSPI;Persist Security Info=True;";
connectionString += "Initial Catalog=SalesDB;Data Source=" + newServer;
// set new connection string
employeesDA.&lt;span class="label"&gt;Connection &lt;/span&gt;= connectionString;
// query the data source again
DataObject employeesDO = thisXDocument.DataObjects["Employees"];
employeesDO.Query();</code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.InfoPath.ADOAdapter2.Name" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Name : string" Usage="Microsoft.Office.Interop.InfoPath.ADOAdapter2.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.InfoPath</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(11)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(11)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the name of an <see cref="T:Microsoft.Office.Interop.InfoPath.ADOAdapterObject" /> object.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Query">
      <MemberSignature Language="C#" Value="public void Query ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Query() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.InfoPath.ADOAdapter2.Query" />
      <MemberSignature Language="VB.NET" Value="Public Sub Query ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Query();" />
      <MemberSignature Language="F#" Value="abstract member Query : unit -&gt; unit" Usage="aDOAdapter2.Query " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.InfoPath</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(12)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Reads data from the associated data adapter.</summary>
        <remarks>
          <para>The query fails if <see cref="P:Microsoft.Office.Interop.InfoPath.ADOAdapter2.QueryAllowed" /> is <b>false</b>.</para>
          <para />
        </remarks>
        <example>
          <para>In the following example, the <b>Query</b> method of the <see cref="T:Microsoft.Office.Interop.InfoPath.ADOAdapterObject" /> object is used to query the Employees table of the Northwind database through the secondary data source "Employees." The <paramref name="EmployeeID" /> of the record returned matches the value of the <paramref name="my:field2" /> node. This sample requires <paramref name="my:field2" /> in the main data source and bound to a text box in a view that contains the button to invoke the following code:</para>
          <code>// retrieve the Employees Adapter from the DataAdapters collection
ADOAdapter employeesDA = (ADOAdapter)thisXDocument.DataAdapters["Employees"];
// get employee’s ID from the main DOM
string employeeID = thisXDocument.DOM.selectSingleNode("//my:field2").text;
// Change the ADOAdapter’s command to retrieve the record of the Employee’s ID entered
// by the user
employeesDA.Command = "select * from Employees where EmployeeID=" + employeeID;
// get DataObject from the DataObjects collection and call Query to refresh
// the data object
DataObject employeesDO = thisXDocument.DataObjects["Employees"];
employeesDO.&lt;span class="label"&gt;Query&lt;/span&gt;();</code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="QueryAllowed">
      <MemberSignature Language="C#" Value="public bool QueryAllowed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool QueryAllowed" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.InfoPath.ADOAdapter2.QueryAllowed" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property QueryAllowed As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool QueryAllowed { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.QueryAllowed : bool" Usage="Microsoft.Office.Interop.InfoPath.ADOAdapter2.QueryAllowed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.InfoPath</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(9)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(9)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns <b>true</b>, corresponding to the <b>queryAllowed</b> attribute in the form definition file (.xsf).</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Submit">
      <MemberSignature Language="C#" Value="public void Submit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Submit() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.InfoPath.ADOAdapter2.Submit" />
      <MemberSignature Language="VB.NET" Value="Public Sub Submit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Submit();" />
      <MemberSignature Language="F#" Value="abstract member Submit : unit -&gt; unit" Usage="aDOAdapter2.Submit " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.InfoPath</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(13)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Executes the submit operation on the associated data adapter.</summary>
        <remarks>
          <para>The submit fails if the <see cref="P:Microsoft.Office.Interop.InfoPath.ADOAdapter2.SubmitAllowed" /> property is <b>false</b>.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SubmitAllowed">
      <MemberSignature Language="C#" Value="public bool SubmitAllowed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SubmitAllowed" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.InfoPath.ADOAdapter2.SubmitAllowed" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SubmitAllowed As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool SubmitAllowed { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.SubmitAllowed : bool" Usage="Microsoft.Office.Interop.InfoPath.ADOAdapter2.SubmitAllowed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.InfoPath</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(10)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(10)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns a value corresponding to the <b>submitAllowed</b> attribute in the form definition file (.xsf).</summary>
        <value>To be added.</value>
        <remarks>
          <para>The default value of the <b>SubmitAllowed</b> property is <b>false</b>, as is the default value for the <b>submitAllowed</b> attribute. If the <b>submitAllowed</b> attribute is set to <b>true</b>, the ADO connection supports submitting data as well as querying.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Timeout">
      <MemberSignature Language="C#" Value="public int Timeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Timeout" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.InfoPath.ADOAdapter2.Timeout" />
      <MemberSignature Language="VB.NET" Value="Public Property Timeout As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Timeout { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.Timeout : int with get, set" Usage="Microsoft.Office.Interop.InfoPath.ADOAdapter2.Timeout" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.Office.Interop.InfoPath.ADOAdapter.Timeout</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.InfoPath</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(7)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(7)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(7)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the timeout value for an <see cref="T:Microsoft.Office.Interop.InfoPath.ADOAdapterObject" /> object.</summary>
        <value>To be added.</value>
        <remarks>
          <para>The Timeout property of the <b>ADOAdapter</b> object contains the timeout value that is used by the ADO data adapter to regulate the time used to submit and retrieve data from an ActiveX Data Objects/OLEDB external data source.</para>
          <para>
            <b>Note</b>: The <b>ADOAdapter</b> object is limited to work only with Microsoft SQL Server and Microsoft Access databases.</para>
          <para />
        </remarks>
        <example>
          <para>In the following example, the <b>Timeout</b> property of the <see cref="T:Microsoft.Office.Interop.InfoPath.ADOAdapterObject" /> object is used to display the timeout value of the ADO data adapter in a message box:</para>
          <code>ADOAdapter adapter;
adapter = (ADOAdapter) thisXDocument.DataObjects["Customers"].QueryAdapter;
thisXDocument.UI.Alert("SQL command text: " + adapter.&lt;span class="label"&gt;Timeout&lt;/span&gt;);</code>
        </example>
      </Docs>
    </Member>
  </Members>
</Type>
