<Type Name="UI2" FullName="Microsoft.Office.Interop.InfoPath.UI2">
  <TypeSignature Language="C#" Value="public interface UI2 : Microsoft.Office.Interop.InfoPath.UI" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract UI2 implements class Microsoft.Office.Interop.InfoPath.UI" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Office.Interop.InfoPath.UI2" />
  <TypeSignature Language="VB.NET" Value="Public Interface UI2&#xA;Implements UI" />
  <TypeSignature Language="C++ CLI" Value="public interface class UI2 : Microsoft::Office::Interop::InfoPath::UI" />
  <TypeSignature Language="F#" Value="type UI2 = interface&#xA;    interface UI" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Office.Interop.InfoPath</AssemblyName>
    <AssemblyVersion>15.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.Office.Interop.InfoPath.UI</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.InteropServices.Guid("096CD549-0786-11D1-95FA-0080C78EE3BB")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.Guid("096CD549-0786-11D1-95FA-0080C78EE3BB")&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.InteropServices.TypeLibType(4288)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.TypeLibType(4288)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>This type is a wrapper for a COM interface implemented by a coclass that is required by managed code for COM interoperability. To access the members specified by this interface, use the type that wraps the coclass that implements this interface. For information about that type, including usage, remarks, and examples, see<see cref="T:Microsoft.Office.Interop.InfoPath.UIObject" />.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Alert">
      <MemberSignature Language="C#" Value="public void Alert (string bstrAlertString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Alert([in]string bstrAlertString) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.InfoPath.UI2.Alert(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Alert (bstrAlertString As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Alert(System::String ^ bstrAlertString);" />
      <MemberSignature Language="F#" Value="abstract member Alert : string -&gt; unit" Usage="uI2.Alert bstrAlertString" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Office.Interop.InfoPath.UI.Alert(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.InfoPath</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.InteropServices.DispId(1)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.DispId(1)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bstrAlertString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="bstrAlertString">The text to be displayed.</param>
        <summary>Displays a message box with a custom text message in a Microsoft Office InfoPath form.</summary>
        <remarks>
          <para>The <b>Alert</b> method displays a simple message box that uses an information icon and an OK button. Only the text in the message box can be customized.</para>
          <para>
            <b>Note</b>: In Visual C# code, carriage returns can be inserted into the text of the custom message by using the standard  characters.</para>
          <para />
        </remarks>
        <example>
          <para>In the following example, the <b>Alert</b> method of the <see cref="T:Microsoft.Office.Interop.InfoPath.UIObject" /> object is used to display a message box:</para>
          <code>thisXDocument.UI.&lt;span class="label"&gt;Alert&lt;/span&gt;("Custom message text goes here.");</code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="Confirm">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.InfoPath.XdConfirmChoice Confirm (string bstrPrompt, Microsoft.Office.Interop.InfoPath.XdConfirmButtons lButtons);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype Microsoft.Office.Interop.InfoPath.XdConfirmChoice Confirm([in]string bstrPrompt, [in]valuetype Microsoft.Office.Interop.InfoPath.XdConfirmButtons lButtons) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.InfoPath.UI2.Confirm(System.String,Microsoft.Office.Interop.InfoPath.XdConfirmButtons)" />
      <MemberSignature Language="VB.NET" Value="Public Function Confirm (bstrPrompt As String, lButtons As XdConfirmButtons) As XdConfirmChoice" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::Office::Interop::InfoPath::XdConfirmChoice Confirm(System::String ^ bstrPrompt, Microsoft::Office::Interop::InfoPath::XdConfirmButtons lButtons);" />
      <MemberSignature Language="F#" Value="abstract member Confirm : string * Microsoft.Office.Interop.InfoPath.XdConfirmButtons -&gt; Microsoft.Office.Interop.InfoPath.XdConfirmChoice" Usage="uI2.Confirm (bstrPrompt, lButtons)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.InfoPath</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.InteropServices.DispId(7)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.DispId(7)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.InfoPath.XdConfirmChoice</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bstrPrompt" Type="System.String" />
        <Parameter Name="lButtons" Type="Microsoft.Office.Interop.InfoPath.XdConfirmButtons" />
      </Parameters>
      <Docs>
        <param name="bstrPrompt">The text message to be displayed.</param>
        <param name="lButtons">Specifies the number and type of buttons to display. You may specify any of the values of the <see cref="T:Microsoft.Office.Interop.InfoPath.XdConfirmButtons" /> enumeration.</param>
        <summary>Displays a message box with buttons for input from a user.</summary>
        <returns>An <see cref="T:Microsoft.Office.Interop.InfoPath.XdConfirmChoice" /> enumeration.</returns>
        <remarks>To be added.</remarks>
        <example>
          <para>In the following example, the <b>Confirm</b> method of the <see cref="T:Microsoft.Office.Interop.InfoPath.UIObject" /> object is used to display a dialog box with <b>Yes</b> and <b>No</b> buttons:</para>
          <code>thisXDocument.UI.&lt;span class="label"&gt;Confirm&lt;/span&gt;("Do you wish to continue?", XdConfirmButtons.xdYesNo);</code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="SetSaveAsDialogFileName">
      <MemberSignature Language="C#" Value="public void SetSaveAsDialogFileName (string bstrFileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetSaveAsDialogFileName([in]string bstrFileName) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.InfoPath.UI2.SetSaveAsDialogFileName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetSaveAsDialogFileName (bstrFileName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetSaveAsDialogFileName(System::String ^ bstrFileName);" />
      <MemberSignature Language="F#" Value="abstract member SetSaveAsDialogFileName : string -&gt; unit" Usage="uI2.SetSaveAsDialogFileName bstrFileName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.InfoPath</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.InteropServices.DispId(5)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.DispId(5)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bstrFileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="bstrFileName">The file name of the form supplied to the Save As dialog box.</param>
        <summary>Sets the default file name for a form in the Save As dialog box.</summary>
        <remarks>
          <para>If the <paramref name="bstrFileName" /> argument is a null reference (Nothing in Visual Basic), "Form" is used as the file name. The <b>SetSaveAsDialogFileName</b> method may be used in conjunction with the <see cref="M:Microsoft.Office.Interop.InfoPath.UI2.SetSaveAsDialogLocation(System.String)" /> method.</para>
          <para />
        </remarks>
        <example>
          <para>In the following example, the <b>SetSaveAsDialogFileName</b> method of the <see cref="T:Microsoft.Office.Interop.InfoPath.UIObject" /> object is used to set the default file name for the "Save As" dialog box:</para>
          <code>thisXDocument.UI.&lt;span class="label"&gt;SetSaveAsDialogFileName&lt;/span&gt;("Status Report.xml");</code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="SetSaveAsDialogLocation">
      <MemberSignature Language="C#" Value="public void SetSaveAsDialogLocation (string bstrLocation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetSaveAsDialogLocation([in]string bstrLocation) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.InfoPath.UI2.SetSaveAsDialogLocation(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetSaveAsDialogLocation (bstrLocation As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetSaveAsDialogLocation(System::String ^ bstrLocation);" />
      <MemberSignature Language="F#" Value="abstract member SetSaveAsDialogLocation : string -&gt; unit" Usage="uI2.SetSaveAsDialogLocation bstrLocation" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.InfoPath</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.InteropServices.DispId(6)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.DispId(6)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bstrLocation" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="bstrLocation">The location, expressed as a URL, at which the Save As dialog box starts browsing.</param>
        <summary>Sets the initial location at which the Save As dialog starts to browse when it is opened.</summary>
        <remarks>
          <para>The location specified must be an absolute path and it should not include a file name. InfoPath handles invalid paths, however, and no error message is generated if an invalid path is specified for the <paramref name="bstrLocation" /> argument. The <b>SetSaveAsDialogLocation</b> method may be used in conjunction with the <see cref="M:Microsoft.Office.Interop.InfoPath.UI2.SetSaveAsDialogFileName(System.String)" /> method.</para>
          <para />
        </remarks>
        <example>
          <para>In the following example, the <b>SetSaveAsDialogLocation</b> method of the <see cref="T:Microsoft.Office.Interop.InfoPath.UIObject" /> object is used to set the initial location for the "Save As" dialog:</para>
          <code>thisXDocument.UI.&lt;span class="label"&gt;SetSaveAsDialogLocation&lt;/span&gt;(@"\\MyShare\\Forms");</code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="ShowMailItem">
      <MemberSignature Language="C#" Value="public void ShowMailItem (string bstrTo, string bstrCC, string bstrBCC, string bstrSubject, string bstrBody);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ShowMailItem([in]string bstrTo, [in]string bstrCC, [in]string bstrBCC, [in]string bstrSubject, [in]string bstrBody) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.InfoPath.UI2.ShowMailItem(System.String,System.String,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ShowMailItem (bstrTo As String, bstrCC As String, bstrBCC As String, bstrSubject As String, bstrBody As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ShowMailItem(System::String ^ bstrTo, System::String ^ bstrCC, System::String ^ bstrBCC, System::String ^ bstrSubject, System::String ^ bstrBody);" />
      <MemberSignature Language="F#" Value="abstract member ShowMailItem : string * string * string * string * string -&gt; unit" Usage="uI2.ShowMailItem (bstrTo, bstrCC, bstrBCC, bstrSubject, bstrBody)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Office.Interop.InfoPath.UI.ShowMailItem(System.String,System.String,System.String,System.String,System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.InfoPath</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.InteropServices.DispId(4)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.DispId(4)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bstrTo" Type="System.String" />
        <Parameter Name="bstrCC" Type="System.String" />
        <Parameter Name="bstrBCC" Type="System.String" />
        <Parameter Name="bstrSubject" Type="System.String" />
        <Parameter Name="bstrBody" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="bstrTo">The e-mail address to send the e-mail message to.</param>
        <param name="bstrCC">The e-mail address to copy the e-mail message to.</param>
        <param name="bstrBCC">The e-mail address to blind copy the e-mail message to.</param>
        <param name="bstrSubject">The subject of the e-mail message.</param>
        <param name="bstrBody">The body text of the e-mail message.</param>
        <summary>Creates an e-mail message in the default e-mail editor and attaches the currently open Microsoft Office InfoPath form to the message.</summary>
        <remarks>
          <para>After the e-mail message is created, the default e-mail editor will display the e-mail message; users can then inspect and edit the e-mail message before sending it. The <b>ShowMailItem</b> method will return an error if no e-mail editing program is available.</para>
          <para>
            <b>Note</b>: The <b>ShowMailItem</b> method does not send the e-mail messages it creates; users must manually send the e-mail messages.</para>
          <para>You can also use the <see cref="T:Microsoft.Office.Interop.InfoPath.MailEnvelopeObject" /> object or <see cref="T:Microsoft.Office.Interop.InfoPath.EmailAdapterObject" /> object to programmatically create e-mail messages.</para>
          <para />
        </remarks>
        <example>
          <para>In the following example, the <b>ShowMailItem</b> method of the <see cref="T:Microsoft.Office.Interop.InfoPath.UIObject" /> object is used to create a custom e-mail message:</para>
          <code>thisXDocument.UI.ShowMailItem("someone@example.com", "", "", "Updated Form", "Here is the updated form that you requested.");</code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="ShowModalDialog">
      <MemberSignature Language="C#" Value="public object ShowModalDialog (string bstrName, object varArguments, object varHeight, object varWidth, object varTop, object varLeft);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object ShowModalDialog([in]string bstrName, [in]object varArguments, [in]object varHeight, [in]object varWidth, [in]object varTop, [in]object varLeft) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.InfoPath.UI2.ShowModalDialog(System.String,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ShowModalDialog (bstrName As String, Optional varArguments As Object, Optional varHeight As Object, Optional varWidth As Object, Optional varTop As Object, Optional varLeft As Object) As Object" />
      <MemberSignature Language="F#" Value="abstract member ShowModalDialog : string * obj * obj * obj * obj * obj -&gt; obj" Usage="uI2.ShowModalDialog (bstrName, varArguments, varHeight, varWidth, varTop, varLeft)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Office.Interop.InfoPath.UI.ShowModalDialog(System.String,System.Object,System.Object,System.Object,System.Object,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.InfoPath</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.InteropServices.DispId(2)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.DispId(2)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bstrName" Type="System.String" />
        <Parameter Name="varArguments" Type="System.Object" />
        <Parameter Name="varHeight" Type="System.Object" />
        <Parameter Name="varWidth" Type="System.Object" />
        <Parameter Name="varTop" Type="System.Object" />
        <Parameter Name="varLeft" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="bstrName">The name of the .html file used for the modal dialog box.</param>
        <param name="varArguments">Specifies the arguments to use when displaying the modal dialog box. Can be any type of value, including an array of values.</param>
        <param name="varHeight">Sets the height of the modal dialog box.</param>
        <param name="varWidth">Sets the width of the modal dialog box.</param>
        <param name="varTop">Sets the top position of the modal dialog box relative to the upper left corner of the desktop.</param>
        <param name="varLeft">Sets the left position of the modal dialog box relative to the upper left corner of the desktop.</param>
        <summary>Displays a custom modal dialog box in a Microsoft Office InfoPath form.</summary>
        <returns>An <b>object</b> that specifies how to display the modal dialog box.</returns>
        <remarks>
          <para>The <b>ShowModalDialog</b> method allows you to display custom dialog boxes to users as they fill out a fully trusted form. Custom dialog boxes are implemented as .html files created in any type of HTML editor, such as Microsoft FrontPage. You can use scripting code in a custom dialog box that interacts with the InfoPath object model if you pass objects to the custom dialog box using the <paramref name="varArguments" /> parameter.</para>
          <para>To use a custom dialog box in an InfoPath form, you must first add the .html file of the custom dialog box to the form's set of resource files by using the Resource Files dialog box. The Resource Files dialog box is available from the Tools menu in design mode. After you have added the custom dialog box file to the form, you can use the <b>ShowModalDialog</b> method to display it.</para>
          <para>Although the <b>ShowModalDialog</b> method can only be used in fully trusted forms, you can create a custom dialog box in standard forms using the <b>showModalDialog</b> method of the Dynamic HTML (DHTML) object model if you have an HTML task pane specified in your form, or by using a Windows form.</para>
          <para />
        </remarks>
        <example>
          <para>In the following example, the <b>ShowModalDialog</b> method of the <see cref="T:Microsoft.Office.Interop.InfoPath.UIObject" /> object is used to display a custom dialog box. Note that the <see cref="T:Microsoft.Office.Interop.InfoPath.XDocument" /> object is passed to the custom dialog box using the <paramref name="varArguments" /> parameter.</para>
          <code>thisXDocument.UI.&lt;span class="label"&gt;ShowModalDialog&lt;/span&gt;("show.htm",(object)thisXDocument,100,100,10,10);</code>
          <para>The following example is the HTML code used to implement a simple custom dialog box. Note the use of the <b>dialogArguments</b> property of the DHTML window object to get the values passed to the custom dialog box, which in this case is the <b>XDocument</b> object of the InfoPath object model, from the <b>ShowModalDialog</b> method. When a user clicks the Show Alert button in the custom dialog box, the source XML of the form's underlying XML document appears in a message box.</para>
          <code>&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;script language="jscript"&amp;gt;
 var gobjXDocument = null;
 function Initialize()
 {
  // Save a reference to the XDocument object.
  if (typeof window.dialogArguments == "object")
  gobjXDocument = window.dialogArguments;
 }
&amp;lt;/script&amp;gt;

&amp;lt;title&amp;gt;A Simple Custom Dialog Box&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;

&amp;lt;body style="BACKGROUND-COLOR: window" onLoad="Initialize()"&amp;gt;
 &amp;lt;strong&amp;gt;Click one of the following buttons:&amp;lt;/strong&amp;gt;
 &amp;lt;br/&amp;gt;
 &amp;lt;br/&amp;gt;
 &amp;lt;div id="divButtons" tyle="align:center"&amp;gt;
 &amp;lt;input id="btnShowAlert" style="WIDTH: 106px; HEIGHT: 24px" 
  onclick='gobjXDocument.UI.Alert(gobjXDocument.DOM.xml);' 
   type="button" size="21" value="Show Alert"&amp;gt;&amp;lt;/input&amp;gt;
 &amp;lt;input id="btnCancel" style="WIDTH: 106px; HEIGHT: 24px" 
  onclick="window.close();" type="button" size="21" 
  value="Cancel"&amp;gt;&amp;lt;/input&amp;gt;
 &amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;</code>
          <para>For information on how to use the <b>ShowModalDialog</b> box method, see How to: Display Alerts and Dialog Boxes.</para>
        </example>
      </Docs>
    </Member>
    <Member MemberName="ShowSignatureDialog">
      <MemberSignature Language="C#" Value="public void ShowSignatureDialog ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ShowSignatureDialog() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.InfoPath.UI2.ShowSignatureDialog" />
      <MemberSignature Language="VB.NET" Value="Public Sub ShowSignatureDialog ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ShowSignatureDialog();" />
      <MemberSignature Language="F#" Value="abstract member ShowSignatureDialog : unit -&gt; unit" Usage="uI2.ShowSignatureDialog " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Office.Interop.InfoPath.UI.ShowSignatureDialog</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.InfoPath</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.InteropServices.DispId(3)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.DispId(3)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Displays the Microsoft Office InfoPath 2003 Digital Signatures dialog box.</summary>
        <remarks>
          <para>The <b>ShowSignatureDialog</b> method can be used only in forms that have been enabled for digital signing. The method will return an error if used in a form that is not enabled for digital signing.</para>
          <para />
        </remarks>
        <example>
          <para>In the following example, the <b>ShowSignatureDialog</b> method of the <see cref="T:Microsoft.Office.Interop.InfoPath.UIObject" /> object is used to display the Microsoft InfoPath Digital Signatures dialog box:</para>
          <code>thisXDocument.UI.&lt;span class="label"&gt;ShowSignatureDialog&lt;/span&gt;();</code>
        </example>
      </Docs>
    </Member>
  </Members>
</Type>
