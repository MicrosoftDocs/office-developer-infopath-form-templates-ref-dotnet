<Type Name="View3" FullName="Microsoft.Office.Interop.InfoPath.View3">
  <TypeSignature Language="C#" Value="public interface View3 : Microsoft.Office.Interop.InfoPath.View2" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract View3 implements class Microsoft.Office.Interop.InfoPath.View2" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Office.Interop.InfoPath.View3" />
  <TypeSignature Language="VB.NET" Value="Public Interface View3&#xA;Implements View2" />
  <TypeSignature Language="C++ CLI" Value="public interface class View3 : Microsoft::Office::Interop::InfoPath::View2" />
  <TypeSignature Language="F#" Value="type View3 = interface&#xA;    interface View2" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Office.Interop.InfoPath</AssemblyName>
    <AssemblyVersion>15.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.Office.Interop.InfoPath.View2</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.Guid("096CD765-0786-11D1-95FA-0080C78EE3BB")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.TypeLibType(4288)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>This type is a wrapper for a COM interface implemented by a coclass that is required by managed code for COM interoperability. To access the members specified by this interface, use the type that wraps the coclass that implements this interface. For information about that type, including usage, remarks, and examples, see<see cref="T:Microsoft.Office.Interop.InfoPath.ViewObject" />.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="DisableAutoUpdate">
      <MemberSignature Language="C#" Value="public void DisableAutoUpdate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DisableAutoUpdate() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.InfoPath.View3.DisableAutoUpdate" />
      <MemberSignature Language="VB.NET" Value="Public Sub DisableAutoUpdate ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DisableAutoUpdate();" />
      <MemberSignature Language="F#" Value="abstract member DisableAutoUpdate : unit -&gt; unit" Usage="view3.DisableAutoUpdate " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Office.Interop.InfoPath.View2.DisableAutoUpdate</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.InfoPath</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(7)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Disables automatic synchronization between a form's underlying XML document and the associated view.</summary>
        <remarks>
          <para>The views in a Microsoft InfoPath form are automatically synchronized with the data that is contained in a form's underlying XML document. You can override this by using the <b>DisableAutoUpdate</b> method. You may need to do this for performance reasons, such as when you are programmatically making many changes to a form's underlying XML document and you do not want the view to be refreshed until the changes are complete.</para>
          <para>By default, views will be updated automatically when the application is idle. View synchronization can be re-enabled using the <see cref="M:Microsoft.Office.Interop.InfoPath.View3.EnableAutoUpdate" /> method.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableAutoUpdate">
      <MemberSignature Language="C#" Value="public void EnableAutoUpdate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EnableAutoUpdate() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.InfoPath.View3.EnableAutoUpdate" />
      <MemberSignature Language="VB.NET" Value="Public Sub EnableAutoUpdate ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnableAutoUpdate();" />
      <MemberSignature Language="F#" Value="abstract member EnableAutoUpdate : unit -&gt; unit" Usage="view3.EnableAutoUpdate " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Office.Interop.InfoPath.View2.EnableAutoUpdate</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.InfoPath</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(8)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Enables automatic synchronization between a form's underlying XML document and the associated view.</summary>
        <remarks>
          <para>The views in a Microsoft InfoPath form are automatically synchronized with the data that is contained in a form's underlying XML document. However, this can be overridden using the <see cref="M:Microsoft.Office.Interop.InfoPath.View3.DisableAutoUpdate" /> method. To re-enable synchronization, use the <b>EnableAutoUpdate</b> method.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExecuteAction">
      <MemberSignature Language="C#" Value="public void ExecuteAction (string bstrAction, object varXmlToEdit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ExecuteAction([in]string bstrAction, [in]object varXmlToEdit) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.InfoPath.View3.ExecuteAction(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ExecuteAction (bstrAction As String, Optional varXmlToEdit As Object)" />
      <MemberSignature Language="F#" Value="abstract member ExecuteAction : string * obj -&gt; unit" Usage="view3.ExecuteAction (bstrAction, varXmlToEdit)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Office.Interop.InfoPath.View2.ExecuteAction(System.String,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.InfoPath</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(14)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bstrAction" Type="System.String" />
        <Parameter Name="varXmlToEdit" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="bstrAction">The name of the editing action to perform.</param>
        <param name="varXmlToEdit">The name of the field or group to which to apply the editing action. This is equivalent to the value of the name attribute in the <b>xmlToEdit</b> element of the form definition (.xsf) file.</param>
        <summary>Executes a Microsoft InfoPath editing command against a form's underlying XML document, based on the data selected in the view.</summary>
        <remarks>
          <para>The <b>ExecuteAction</b> method is used to programmatically perform built-in InfoPath editing actions against a form's underlying XML document, based on the selected context in a view.</para>
          <para>The action that is executed will be the same action that would be used when clicking on an equivalent menu or toolbar button; namely one for which the button element in the .xsf file has corresponding <b>xmlToEdit</b> and <b>action</b> attributes. As with using a button, the action will be based on current selection: it will act on the selected context (and in the case where the selection would lead the button to be disabled, then the <b>ExecuteAction</b> method will have no effect).</para>
          <para>It is possible to first set the selection context by using the <see cref="M:Microsoft.Office.Interop.InfoPath.View3.SelectNodes(Microsoft.Office.Interop.InfoPath.IXMLDOMNode,System.Object,System.Object)" /> method or <see cref="M:Microsoft.Office.Interop.InfoPath.View3.SelectText(Microsoft.Office.Interop.InfoPath.IXMLDOMNode,System.Object)" /> method, then call the <b>ExecuteAction</b> method to act on that context.</para>
          <para>The <b>ExecuteAction</b> method will return an error for the following reasons:</para>
          <list type="bullet">
            <item>
              <description>The <paramref name="bstrAction" /> parameter does not contain a valid editing component name.</description>
            </item>
            <item>
              <description>The <paramref name="varXmlToEdit" /> parameter does not match an editing component that is defined in the view.</description>
            </item>
            <item>
              <description>The <paramref name="varXmlToEdit" /> parameter is required for a specific editing action.</description>
            </item>
            <item>
              <description>The editing action is not applicable to the selected context.</description>
            </item>
            <item>
              <description>The following is a table of parameter combinations that can be used with the <b>ExecuteAction</b> method.</description>
            </item>
          </list>
          <list type="table">
            <item>
              <term>"Copy"</term>
              <description>Copies the selected data to the clipboard.</description>
            </item>
            <item>
              <term>"Paste"</term>
              <description>Copies data from the clipboard to the insertion point.</description>
            </item>
            <item>
              <term>"Cut"</term>
              <description>Removes the selected data and copies it to the clipboard.</description>
            </item>
            <item>
              <term>"Delete"</term>
              <description>Deletes the selected data.</description>
            </item>
            <item>
              <term>"xCollection::insert", "<paramref name="xmlToEdit" />"</term>
              <description>Inserts data based on the selected context using the xCollection editing component. If current selection is within a container of the xCollection, specified by its <b>xmlToEdit</b> element in the .xsf, then the <b>fragmentToInsert</b> element data is appended within that container.</description>
            </item>
            <item>
              <term>"xCollection::insertBefore", "<paramref name="xmlToEdit" />"</term>
              <description>Inserts data before the selected context using the xCollection editing component. If current selection is within an item of the xCollection, as specified by its <b>xmlToEdit</b> element in the .xsf, then the <b>fragmentToInsert</b> element data is inserted before that item.</description>
            </item>
            <item>
              <term>"xCollection::insertAfter", "<paramref name="xmlToEdit" />"</term>
              <description>Inserts data after the selected context using the xCollection editing component. If current selection is within an item of the xCollection, as specified by its <b>xmlToEdit</b> element in the .xsf, then the <b>fragmentToInsert</b> element data is inserted after that item.</description>
            </item>
            <item>
              <term>"xCollection::remove", "<paramref name="xmlToEdit" />"</term>
              <description>Deletes data from the selected context using the xCollection editing component. If current selection is within an item of the xCollection, as specified by its <b>xmlToEdit</b> element in the .xsf, then that item is deleted.</description>
            </item>
            <item>
              <term>"xCollection::removeAll", "<paramref name="xmlToEdit" />"</term>
              <description>Deletes all data contained within the selected context using the xCollection editing component. If current selection is within a container of the xCollection, as specified by the <b>xmlToEdit</b> element in the .xsf, then this action deletes all the items within that container.</description>
            </item>
            <item>
              <term>"xReplace::replace", "<paramref name="xmlToEdit" />"</term>
              <description>Replaces the data in the selected context using the <b>xReplace</b> editing component. If current selection is within an item of the <b>xReplace</b>, as specified by its <b>xmlToEdit</b> element in the .xsf, then that item is replaced by the <b>fragmentToInsert</b> element data.</description>
            </item>
            <item>
              <term>"xOptional::insert", "<paramref name="xmlToEdit" />"</term>
              <description>Inserts data based on the selected context using the xOptional editing component. If current selection is within an container of the xOptional, as specified by its <b>xmlToEdit</b> element in the .xsf, then the <b>fragmentToInsert</b> element data is appended within that container.</description>
            </item>
            <item>
              <term>"xOptional::remove", "<paramref name="xmlToEdit" />"</term>
              <description>Deletes data from the selected context using the xOptional editing component. If current selection is within an item of the xOptional, as specified by its <b>xmlToEdit</b> element in the .xsf, then that item is deleted.</description>
            </item>
          </list>
          <para>Note   In some cases, calling the <b>ExecuteAction</b> method from the <see cref="E:Microsoft.Office.Interop.InfoPath._ButtonEventSink_Event.OnClick" /> for a button in a view may cause an error. This is because the selected context changes to the button when the button is clicked. In this case, it is better to use a button (or link) on a custom task pane, toolbar, or menu to call the <b>ExecuteAction</b> method.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Export">
      <MemberSignature Language="C#" Value="public void Export (string bstrURL, string bstrFormat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Export([in]string bstrURL, [in]string bstrFormat) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.InfoPath.View3.Export(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Export (bstrURL As String, bstrFormat As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Export(System::String ^ bstrURL, System::String ^ bstrFormat);" />
      <MemberSignature Language="F#" Value="abstract member Export : string * string -&gt; unit" Usage="view3.Export (bstrURL, bstrFormat)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Office.Interop.InfoPath.View2.Export(System.String,System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.InfoPath</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(9)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bstrURL" Type="System.String" />
        <Parameter Name="bstrFormat" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="bstrURL">The directory location that the exported view file will be written to.</param>
        <param name="bstrFormat">The type of file format to export to. The supported values are:"MHT" - Web Archive, single file format (.mht)"PDF" - Portable Document Format file (.pdf)"XPS" - XPS Document (.xps)</param>
        <summary>Exports the view to a file of the specified format.</summary>
        <remarks>
          <para>If used in a form that is not fully trusted, the <b>Export</b> method will return a "permission denied" error.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExportAsFixedFormat">
      <MemberSignature Language="C#" Value="public void ExportAsFixedFormat (string bstrURL, string bstrFormat, object varExporter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ExportAsFixedFormat([in]string bstrURL, [in]string bstrFormat, [in]object varExporter) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.InfoPath.View3.ExportAsFixedFormat(System.String,System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ExportAsFixedFormat (bstrURL As String, bstrFormat As String, varExporter As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ExportAsFixedFormat(System::String ^ bstrURL, System::String ^ bstrFormat, System::Object ^ varExporter);" />
      <MemberSignature Language="F#" Value="abstract member ExportAsFixedFormat : string * string * obj -&gt; unit" Usage="view3.ExportAsFixedFormat (bstrURL, bstrFormat, varExporter)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Office.Interop.InfoPath.View2.ExportAsFixedFormat(System.String,System.String,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.InfoPath</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(15)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bstrURL" Type="System.String" />
        <Parameter Name="bstrFormat" Type="System.String" />
        <Parameter Name="varExporter" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="bstrURL">The directory location that the exported view file will be written to.</param>
        <param name="bstrFormat">The type of file format to export to. The supported values are:"MHT" - Web Archive, single file format (.mht)"PDF" - Portable Document Format file (.pdf)"XPS" - XPS Document (.xps)</param>
        <param name="varExporter">An <b>IUnknown</b> interface pointer that supports the <b>IMsoDocExporter</b> interface for the active document. Used for initializing a COM add-in for exporting to a fixed-format file.</param>
        <summary>Exports the view to a file of the specified format, and supports initializing a COM add-in for exporting to a fixed-format file.</summary>
        <remarks>
          <para>The <paramref name="varExporter" /> parameter is used to provide an <b>IUnknown</b> interface pointer to the active document. This is used to initialize a COM add-in for exporting to a fixed-format file. For more information, see the article "Extending the Office Fixed-Format Export Feature" on <a href="http://go.microsoft.com/fwlink?LinkId=61826">Microsoft Developer Network (MSDN)</a></para>
          <para>This member can be accessed only by forms opened from a form template that has been configured to run with full trust using the Security and Trust category of the Form Options dialog box. This member requires full trust for the immediate caller and cannot be used by partially trusted code. For more information, see "Using Libraries from Partially Trusted Code" on MSDN.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ForceUpdate">
      <MemberSignature Language="C#" Value="public void ForceUpdate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ForceUpdate() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.InfoPath.View3.ForceUpdate" />
      <MemberSignature Language="VB.NET" Value="Public Sub ForceUpdate ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ForceUpdate();" />
      <MemberSignature Language="F#" Value="abstract member ForceUpdate : unit -&gt; unit" Usage="view3.ForceUpdate " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Office.Interop.InfoPath.View2.ForceUpdate</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.InfoPath</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(6)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Forces synchronization between a form's underlying XML document and the associated view.</summary>
        <remarks>
          <para>The views in a Microsoft InfoPath form are automatically synchronized with the data that is contained in a form's underlying XML document. However, you can force synchronization to occur using the <b>ForceUpdate</b> method. This is also useful when data in a secondary data source has changed and needs to be refreshed in the view.</para>
          <para>Automatic synchronization can be disabled using the <see cref="M:Microsoft.Office.Interop.InfoPath.View3.DisableAutoUpdate" /> method and enabled using the <see cref="M:Microsoft.Office.Interop.InfoPath.View3.EnableAutoUpdate" /> method.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetContextNodes">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.InfoPath.XMLNodesCollection GetContextNodes (object varNode, object varViewContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Office.Interop.InfoPath.XMLNodesCollection GetContextNodes([in]object varNode, [in]object varViewContext) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.InfoPath.View3.GetContextNodes(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetContextNodes (Optional varNode As Object, Optional varViewContext As Object) As XMLNodesCollection" />
      <MemberSignature Language="F#" Value="abstract member GetContextNodes : obj * obj -&gt; Microsoft.Office.Interop.InfoPath.XMLNodesCollection" Usage="view3.GetContextNodes (varNode, varViewContext)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Office.Interop.InfoPath.View2.GetContextNodes(System.Object,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.InfoPath</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(11)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.InfoPath.XMLNodesCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="varNode" Type="System.Object" />
        <Parameter Name="varViewContext" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="varNode">An XML DOM node.</param>
        <param name="varViewContext">The ID of the control that is used for the context.</param>
        <summary>Gets a reference to an <see cref="T:Microsoft.Office.Interop.InfoPath.XMLNodesCollection" /> collection that is populated with XML Document Object Model (DOM) nodes based on the current context.</summary>
        <returns>A reference to the <see cref="T:Microsoft.Office.Interop.InfoPath.XMLNodesCollection" />.</returns>
        <remarks>
          <para>The collection returned by the <b>GetContextNodes</b> method consists of the sequence of XML DOM nodes that are mapped from the view, corresponding to the current XSL Transformation (XSLT) node, starting at the current selection and walking up through the view ancestors to the BODY tag. </para>
          <para>If no parameters are used, the context nodes are based on the current selection. If parameters are used, then the context nodes returned are those that would be returned based on the selection that would be obtained from calling the <see cref="M:Microsoft.Office.Interop.InfoPath.View3.SelectNodes(Microsoft.Office.Interop.InfoPath.IXMLDOMNode,System.Object,System.Object)" /> method.</para>
          <para>
            <b>Note</b>: The <b>GetContextNodes</b> method will not return nodes based on the current selection if used in the <see cref="E:Microsoft.Office.Interop.InfoPath._ButtonEventSink_Event.OnClick" /> event of a button in the view, since the focus is lost from the control that is intended to be in context. To avoid this behavior, use the <b>GetContextNodes</b> method from a custom task pane, menu or toolbar.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSelectedNodes">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.InfoPath.XMLNodesCollection GetSelectedNodes ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Office.Interop.InfoPath.XMLNodesCollection GetSelectedNodes() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.InfoPath.View3.GetSelectedNodes" />
      <MemberSignature Language="VB.NET" Value="Public Function GetSelectedNodes () As XMLNodesCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::Office::Interop::InfoPath::XMLNodesCollection ^ GetSelectedNodes();" />
      <MemberSignature Language="F#" Value="abstract member GetSelectedNodes : unit -&gt; Microsoft.Office.Interop.InfoPath.XMLNodesCollection" Usage="view3.GetSelectedNodes " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Office.Interop.InfoPath.View2.GetSelectedNodes</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.InfoPath</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(10)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.InfoPath.XMLNodesCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gets a reference to an <see cref="T:Microsoft.Office.Interop.InfoPath.XMLNodesCollection" /> collection that is populated with XML Document Object Model (DOM) nodes based on the current selection of items in a view.</summary>
        <returns>A reference to the <see cref="T:Microsoft.Office.Interop.InfoPath.XMLNodesCollection" />.</returns>
        <remarks>
          <para>If no items are selected in a view, or if only text is selected, then the <b>GetSelectedNodes</b> method returns an empty collection.</para>
          <para>
            <b>Note</b>: The <b>GetSelectedNodes</b> method will not return nodes based on the current selection if used in the <see cref="E:Microsoft.Office.Interop.InfoPath._ButtonEventSink_Event.OnClick" /> event of a button in the view, since the focus is lost from the control that is intended to be in context.  To avoid this behavior, use the <b>GetSelectedNodes</b> method from a custom task pane, menu or toolbar.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.InfoPath.View3.Name" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Name : string" Usage="Microsoft.Office.Interop.InfoPath.View3.Name" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.Office.Interop.InfoPath.View2.Name</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.InfoPath</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(1)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the name of the view.</summary>
        <value>The name of the view.</value>
        <remarks>
          <para>To determine the default view use the <see cref="P:Microsoft.Office.Interop.InfoPath.ViewInfo.IsDefault" /> property of the <see cref="T:Microsoft.Office.Interop.InfoPath.ViewInfoObject" /> object.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectNodes">
      <MemberSignature Language="C#" Value="public void SelectNodes (Microsoft.Office.Interop.InfoPath.Xml.IXMLDOMNode pxnStartNode, object varEndNode, object varViewContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SelectNodes([in]class Microsoft.Office.Interop.InfoPath.Xml.IXMLDOMNode pxnStartNode, [in]object varEndNode, [in]object varViewContext) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.InfoPath.View3.SelectNodes(Microsoft.Office.Interop.InfoPath.Xml.IXMLDOMNode,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SelectNodes (pxnStartNode As IXMLDOMNode, Optional varEndNode As Object, Optional varViewContext As Object)" />
      <MemberSignature Language="F#" Value="abstract member SelectNodes : Microsoft.Office.Interop.InfoPath.Xml.IXMLDOMNode * obj * obj -&gt; unit" Usage="view3.SelectNodes (pxnStartNode, varEndNode, varViewContext)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Office.Interop.InfoPath.View2.SelectNodes(Microsoft.Office.Interop.InfoPath.Xml.IXMLDOMNode,System.Object,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.InfoPath</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(12)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pxnStartNode" Type="Microsoft.Office.Interop.InfoPath.Xml.IXMLDOMNode" />
        <Parameter Name="varEndNode" Type="System.Object" />
        <Parameter Name="varViewContext" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="pxnStartNode">The XML DOM node that begins the range.</param>
        <param name="varEndNode">The XML DOM node that ends the range. If not specified, only the starting XML DOM node will be used.</param>
        <param name="varViewContext">The ID of the control that is used for the context, which is an element with the specified view context of <b>xd:CtrlId</b>.</param>
        <summary>Selects a range of nodes in a view based on the specified starting XML Document Object Model (DOM) node, the ending XML DOM node, and the view context.</summary>
        <remarks>
          <para>If a view context is specified, all of the XML DOM nodes that are to be selected must be within that context.</para>
          <para>If any of the arguments to the <b>SelectNodes</b> method are null or are not exposed in the view, the <b>SelectNodes</b> method will return an error. In addition, if there are more than one set of view elements which map to the same specified XML DOM nodes, within the specified view context, then the <b>SelectNodes</b> method will also return an error.</para>
          <para>
            <b>Note</b>: The <b>SelectNodes</b> method requires that the nodes be structurally selectable in the view.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectText">
      <MemberSignature Language="C#" Value="public void SelectText (Microsoft.Office.Interop.InfoPath.Xml.IXMLDOMNode pxnField, object varViewContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SelectText([in]class Microsoft.Office.Interop.InfoPath.Xml.IXMLDOMNode pxnField, [in]object varViewContext) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.InfoPath.View3.SelectText(Microsoft.Office.Interop.InfoPath.Xml.IXMLDOMNode,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SelectText (pxnField As IXMLDOMNode, Optional varViewContext As Object)" />
      <MemberSignature Language="F#" Value="abstract member SelectText : Microsoft.Office.Interop.InfoPath.Xml.IXMLDOMNode * obj -&gt; unit" Usage="view3.SelectText (pxnField, varViewContext)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Office.Interop.InfoPath.View2.SelectText(Microsoft.Office.Interop.InfoPath.Xml.IXMLDOMNode,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.InfoPath</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(13)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pxnField" Type="Microsoft.Office.Interop.InfoPath.Xml.IXMLDOMNode" />
        <Parameter Name="varViewContext" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="pxnField">The XML DOM node.</param>
        <param name="varViewContext">The ID of the control that is used for the context, which is an element with the specified view context of <b>xd:CtrlId</b>.</param>
        <summary>Selects the text contained in an editable field that is bound to the specified XML Document Object Model (DOM) node.</summary>
        <remarks>
          <para>If a view context is specified, then the editable field that is to be selected must be within that context.</para>
          <para>If there is more than one set of view elements which map to the same specified XML DOM node, within the given view context, then the <b>SelectText</b> method will return an error. In addition, if any of the arguments to the <b>SelectText</b> method are a null reference (Nothing in Visual Basic) or are not exposed in the view, then the <b>SelectText</b> method will also return an error.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SignatureLines">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.InfoPath.SignatureLinesCollection SignatureLines { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.InfoPath.SignatureLinesCollection SignatureLines" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.InfoPath.View3.SignatureLines" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SignatureLines As SignatureLinesCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::InfoPath::SignatureLinesCollection ^ SignatureLines { Microsoft::Office::Interop::InfoPath::SignatureLinesCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SignatureLines : Microsoft.Office.Interop.InfoPath.SignatureLinesCollection" Usage="Microsoft.Office.Interop.InfoPath.View3.SignatureLines" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.InfoPath</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(16)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.InfoPath.SignatureLinesCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a reference to the <see cref="T:Microsoft.Office.Interop.InfoPath.SignatureLinesCollection" /> associated with the current view.</summary>
        <value>An object that represents the set of Signature Line controls in the current view.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SwitchView">
      <MemberSignature Language="C#" Value="public void SwitchView (string bstrName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SwitchView([in]string bstrName) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.InfoPath.View3.SwitchView(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SwitchView (bstrName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SwitchView(System::String ^ bstrName);" />
      <MemberSignature Language="F#" Value="abstract member SwitchView : string -&gt; unit" Usage="view3.SwitchView bstrName" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Office.Interop.InfoPath.View2.SwitchView(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.InfoPath</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bstrName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="bstrName">The name of the view to switch to. If an empty string is used, the default view is displayed.</param>
        <summary>Changes the active view of a Microsoft InfoPath form to a specified view.</summary>
        <remarks>
          <para>If an empty string is used as the <paramref name="bstrName" /> parameter, the view is changed to the default view of the form.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Window">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.InfoPath.WindowObject Window { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.InfoPath.WindowObject Window" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.InfoPath.View3.Window" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Window As WindowObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::InfoPath::WindowObject ^ Window { Microsoft::Office::Interop::InfoPath::WindowObject ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Window : Microsoft.Office.Interop.InfoPath.WindowObject" Usage="Microsoft.Office.Interop.InfoPath.View3.Window" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.Office.Interop.InfoPath.View2.Window</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.InfoPath</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(4)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(4)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.InfoPath.WindowObject</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a reference to the window associated with the view.</summary>
        <value>The <see cref="T:Microsoft.Office.Interop.InfoPath.WindowObject" /> associated with the current view.</value>
        <remarks>
          <para>The <see cref="T:Microsoft.Office.Interop.InfoPath.WindowObject" /> object returned represents the currently active Microsoft InfoPath window. It can also be accessed through the <see cref="T:Microsoft.Office.Interop.InfoPath.WindowsCollection" /> collection.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>