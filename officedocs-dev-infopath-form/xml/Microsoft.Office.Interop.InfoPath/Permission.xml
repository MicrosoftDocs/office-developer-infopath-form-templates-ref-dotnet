<Type Name="Permission" FullName="Microsoft.Office.Interop.InfoPath.Permission">
  <TypeSignature Language="C#" Value="public interface Permission : System.Collections.IEnumerable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract Permission implements class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Office.Interop.InfoPath.Permission" />
  <TypeSignature Language="VB.NET" Value="Public Interface Permission&#xA;Implements IEnumerable" />
  <TypeSignature Language="C++ CLI" Value="public interface class Permission : System::Collections::IEnumerable" />
  <TypeSignature Language="F#" Value="type Permission = interface&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Office.Interop.InfoPath</AssemblyName>
    <AssemblyVersion>15.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.Guid("096CD6CC-0786-11D1-95FA-0080C78EE3BB")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.TypeLibType(4288)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>This type is a wrapper for a COM interface implemented by a coclass that is required by managed code for COM interoperability. To access the members specified by this interface, use the type that wraps the coclass that implements this interface. For information about that type, including usage, remarks, and examples, see<see cref="T:Microsoft.Office.Interop.InfoPath.PermissionObject" />.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.InfoPath.UserPermissionObject Add (string bstrUserId, object varPermission, object varExpirationDate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Office.Interop.InfoPath.UserPermissionObject Add([in]string bstrUserId, [in]object varPermission, [in]object varExpirationDate) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.InfoPath.Permission.Add(System.String,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Add (bstrUserId As String, Optional varPermission As Object, Optional varExpirationDate As Object) As UserPermissionObject" />
      <MemberSignature Language="F#" Value="abstract member Add : string * obj * obj -&gt; Microsoft.Office.Interop.InfoPath.UserPermissionObject" Usage="permission.Add (bstrUserId, varPermission, varExpirationDate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.InfoPath</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.InfoPath.UserPermissionObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bstrUserId" Type="System.String" />
        <Parameter Name="varPermission" Type="System.Object" />
        <Parameter Name="varExpirationDate" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="bstrUserId">The e-mail address in the format user@domain.com of the user to whom permissions on the current form are being granted. Required.</param>
        <param name="varPermission">The permissions on the current form that are being granted to the specified user as a combination of one or more <see cref="T:Microsoft.Office.Core.MsoPermission" /> values. Optional.</param>
        <param name="varExpirationDate">The expiration date for the permissions that are being granted as a <b>System.DateTime</b> value. Optional.</param>
        <summary>Creates a new set of permissions on the current form for the specified user with the specified permissions and an expiration date.</summary>
        <returns>A <see cref="T:Microsoft.Office.Interop.InfoPath.UserPermissionObject" /> that represents the specified user.</returns>
        <remarks>
          <para>To access the <see cref="T:Microsoft.Office.Core.MsoPermission" /> enumeration values for setting the <paramref name="varPermission" /> parameter, you must set a reference to the Microsoft Office 14.0 Object Library using <b>COM</b> tab of the Add Reference dialog box in Visual Studio 2012 or Visual Studio. This will establish a reference to the members of the <b>Microsoft.Office.Core</b> namespace.</para>
          <para />
        </remarks>
        <example>
          <para>In the following example, the <b>Add</b> method is used to add a new user to the form, assign that user to the Full Control access level, and set an expiration date of two days from the current date.</para>
          <para>This example requires a <b>using</b> or <b>Imports</b> directive for the <b>Microsoft.Office.Core</b> namespace in the declarations section of the form module.</para>
          <code>_XDocument3 thisDoc = (_XDocument3)thisXDocument;

string strExpirationDate = DateTime.Today.AddDays(2).ToString();
DateTime dtExpirationDate = DateTime.Parse(strExpirationDate);

thisDoc.Permission.Add("someone@example.com",
   msoPermission.msoPermissionFullControl, dtExpirationDate);</code>
          <code>Dim thisDoc As _XDocument3 = DirectCast(thisXDocument, _XDocument3)

Dim strExpirationDate As String = _
   DateTime.Today.AddDays(2).ToString()
dtExpirationDate As DateTime = DateTime.Parse(strExpirationDate)

thisDoc.Permission.UserPermissions.Add("someone@example.com", _
   msoPermission.msoPermissionFullControl, dtExpirationDate)</code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="ApplyPolicy">
      <MemberSignature Language="C#" Value="public void ApplyPolicy (string bstrFileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyPolicy([in]string bstrFileName) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.InfoPath.Permission.ApplyPolicy(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ApplyPolicy (bstrFileName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ApplyPolicy(System::String ^ bstrFileName);" />
      <MemberSignature Language="F#" Value="abstract member ApplyPolicy : string -&gt; unit" Usage="permission.ApplyPolicy bstrFileName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.InfoPath</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(3)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bstrFileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="bstrFileName">The path and file name of an Extensible Rights Markup Language (XRML) file that defines users and groups and permissions to apply to the form template.</param>
        <summary>Applies a policy to the form using a policy template file.</summary>
        <remarks>
          <para>To view an example of the format of an XRML file that is used as a policy template file, see <a href="http://go.microsoft.com/fwlink/?LinkId=64814">Sample End-User License</a></para>
          <para />
        </remarks>
        <example>
          <para>In the following example, the ApplyPolicy method is used to apply a policy template file that allows the user to edit, but not copy the current form.</para>
          <code>_XDocument3 thisDoc = (_XDocument3)thisXDocument;
thisDoc.Permission.ApplyPolicy(
   "\\\\MyShare\\Templates\\Edit_but_not_copy.xml");</code>
          <code>Dim thisDoc As _XDocument3 = DirectCast(thisXDocument, _XDocument3)
thisDoc.Permission.ApplyPolicy( _
   "\\MyShare\Templates\Edit_but_not_copy.xml")</code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.InfoPath.Permission.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="Microsoft.Office.Interop.InfoPath.Permission.Count" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.InfoPath</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(1)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the number of <see cref="T:Microsoft.Office.Interop.InfoPath.UserPermissionObject" /> objects associated with the form.</summary>
        <value>The number of <see cref="T:Microsoft.Office.Interop.InfoPath.UserPermissionObject" /> objects associated with the form.</value>
        <remarks>To be added.</remarks>
        <example>
          <para>In the following example, the <b>Count</b> property is used to display the count of users associated with the form.</para>
          <code>_XDocument3 thisDoc = (_XDocument3)thisXDocument;
thisXDocument.UI.Alert(thisDoc.Permission.Count.ToString());</code>
          <code>Dim thisDoc As _XDocument3 = DirectCast(thisXDocument, _XDocument3)
thisXDocument.UI.Alert(thisDoc.Permission.Count.ToString())</code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="DocumentAuthor">
      <MemberSignature Language="C#" Value="public string DocumentAuthor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DocumentAuthor" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.InfoPath.Permission.DocumentAuthor" />
      <MemberSignature Language="VB.NET" Value="Public Property DocumentAuthor As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DocumentAuthor { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DocumentAuthor : string with get, set" Usage="Microsoft.Office.Interop.InfoPath.Permission.DocumentAuthor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.InfoPath</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(11)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(11)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(11)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the author of the current form as an e-mail address.</summary>
        <value>The e-mail address of the author of the form.</value>
        <remarks>
          <para>The author of the form always has non-expiring owner rights to the form, whether the owner permission is granted explicitly through a <see cref="T:Microsoft.Office.Interop.InfoPath.UserPermission" /> object or not.</para>
          <para />
        </remarks>
        <example>
          <para>In the following example, the <b>DocumentAuthor</b> property is used to display the e-mail address of the document author.</para>
          <code>_XDocument3 thisDoc = (_XDocument3)thisXDocument;
thisXDocument.UI.Alert(thisDoc.Permission.DocumentAuthor);</code>
          <code>Dim thisDoc As _XDocument3 = DirectCast(thisXDocument, _XDocument3)
thisXDocument.UI.Alert(thisDoc.Permission.DocumentAuthor)</code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="Enabled">
      <MemberSignature Language="C#" Value="public bool Enabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Enabled" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.InfoPath.Permission.Enabled" />
      <MemberSignature Language="VB.NET" Value="Public Property Enabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Enabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Enabled : bool with get, set" Usage="Microsoft.Office.Interop.InfoPath.Permission.Enabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.InfoPath</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(6)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(6)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(6)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets whether the permission settings represented by the <b>Permission</b> object are enabled for the current form.</summary>
        <value>
          <b>true</b> if the permission settings are enabled; otherwise <b>false</b>.</value>
        <remarks>
          <para>Use the <b>Enabled</b> property to determine whether permissions are restricted on the active form, and to enable or disable permissions. Set <b>Enabled</b> to <b>false</b> to disable permissions and to remove all users, other than the form author, and their permissions.</para>
          <para>
            <b>Note</b>: In preview mode, the <b>Enabled</b> property will always return <b>false</b>, and if code attempts to change this setting, a <b>System.Runtime.InteropServices.COMException</b> is raised and the message "The property/method is not available in preview mode" is returned.</para>
          <para />
        </remarks>
        <example>
          <para>In the following example, the <b>Enabled</b> property is used to display whether permission settings are enabled for the current form.</para>
          <code>_XDocument3 thisDoc = (_XDocument3)thisXDocument;
thisXDocument.UI.Alert(thisDoc.Permission.Enabled.ToString());</code>
          <code>Dim thisDoc As _XDocument3 = DirectCast(thisXDocument, _XDocument3)
thisXDocument.UI.Alert(thisDoc.Permission..Enabled.ToString())</code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.IEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IEnumerator GetEnumerator() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.InfoPath.Permission.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::IEnumerator ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="abstract member GetEnumerator : unit -&gt; System.Collections.IEnumerator" Usage="permission.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.InfoPath</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(-4)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(1024)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gets an <b>IEnumerator</b> for iterating over the collection.</summary>
        <returns>A <b>System.IEnumerator</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.InfoPath.UserPermissionObject this[object varIndex] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.InfoPath.UserPermissionObject Item(object)" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.InfoPath.Permission.Item(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Item(varIndex As Object) As UserPermissionObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::InfoPath::UserPermissionObject ^ default[System::Object ^] { Microsoft::Office::Interop::InfoPath::UserPermissionObject ^ get(System::Object ^ varIndex); };" />
      <MemberSignature Language="F#" Value="member this.Item(obj) : Microsoft.Office.Interop.InfoPath.UserPermissionObject" Usage="Microsoft.Office.Interop.InfoPath.Permission.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.InfoPath</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.InfoPath.UserPermissionObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="varIndex" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="varIndex">The numeric index of the <b>UserPermission</b> object in the <b>Permission</b> collection, or the email address of the user whose set of permissions on the current form is to be returned.</param>
        <summary>Gets the <see cref="T:Microsoft.Office.Interop.InfoPath.UserPermission" /> object at the specified index. </summary>
        <value>A <see cref="T:Microsoft.Office.Interop.InfoPath.UserPermission" /> object that represents the specified user. Returns a null reference (Nothing in Visual Basic) if the specified <paramref name="varIndex" /> does not exist.</value>
        <remarks>To be added.</remarks>
        <example>
          <para>In the following example, the <b>Item</b> property is used to get the <b>UserPermission</b> object for the user associated with the e-mail address "someone@example.com", and then uses the <see cref="P:Microsoft.Office.Interop.InfoPath.UserPermission.Permission" /> property of the <b>UserPermission</b> object to set that user's permissions to the Change access level.</para>
          <para>To access the <see cref="T:Microsoft.Office.Core.MsoPermission" /> enumeration values for setting permissions, you must set a reference to the Microsoft Office 14.0 Object Library using <b>COM</b> tab of the Add Reference dialog box in Visual Studio 2012 or Visual Studio. This will establish a reference to the members of the <b>Microsoft.Office.Core</b> namespace.</para>
          <para>This example requires a <b>using</b> or <b>Imports</b> directive for the <b>Microsoft.Office.Core</b> namespace in the declarations section of the form module.</para>
          <code>_XDocument3 thisDoc = (_XDocument3)thisXDocument;
thisDoc.Permission["someone@example.com"].Permission = 
   (int)MsoPermission.msoPermissionChange;</code>
          <code>Dim thisDoc As _XDocument3 = DirectCast(thisXDocument, _XDocument3)
thisDoc.Permission["someone@example.com"].Permission = _
   DirectCast(MsoPermission.msoPermissionChange, Integer)</code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="PermissionFromPolicy">
      <MemberSignature Language="C#" Value="public bool PermissionFromPolicy { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool PermissionFromPolicy" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.InfoPath.Permission.PermissionFromPolicy" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PermissionFromPolicy As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool PermissionFromPolicy { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.PermissionFromPolicy : bool" Usage="Microsoft.Office.Interop.InfoPath.Permission.PermissionFromPolicy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.InfoPath</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(12)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(12)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets whether a permission policy has been applied to the current form.</summary>
        <value>
          <b>true</b> if the permission policy was applied; otherwise, <b>false</b>.</value>
        <remarks>
          <para>InfoPath supports the use of administrative permission policies which list users and groups and their form permissions. The <b>PermissionFromPolicy</b> property indicates whether a permission policy was applied the last time permissions were enabled on the form.</para>
          <para>The <b>PermissionFromPolicy</b> property always returns <b>false</b> when checked by a non-owner of the form, even when the user has object model permissions.</para>
          <para />
        </remarks>
        <example>
          <para>In the following example, the <b>PermissionFromPolicy</b> property is used to display whether a permission policy has been applied to the current form.</para>
          <code>_XDocument3 thisDoc = (_XDocument3)thisXDocument;
thisXDocument.UI.Alert(
   thisDoc.Permission.PermissionFromPolicy.ToString());</code>
          <code>Dim thisDoc As _XDocument3 = DirectCast(thisXDocument, _XDocument3)
thisXDocument.UI.Alert( _
   thisDoc.Permission.PermissionFromPolicy.ToString())</code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="PolicyDescription">
      <MemberSignature Language="C#" Value="public string PolicyDescription { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PolicyDescription" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.InfoPath.Permission.PolicyDescription" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PolicyDescription As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ PolicyDescription { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.PolicyDescription : string" Usage="Microsoft.Office.Interop.InfoPath.Permission.PolicyDescription" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.InfoPath</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(9)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(9)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a description of the policy that was applied to the current form.</summary>
        <value>The description of the policy applied to the active form or a default value if no policy was applied.</value>
        <remarks>
          <para>InfoPath supports the use of administrative permission policies which list users and groups and their form permissions.</para>
          <para />
        </remarks>
        <example>
          <para>In the following example, the <b>PolicyDescription</b> property is used to display the description of the policy that was applied to the current form.</para>
          <code>_XDocument3 thisDoc = (_XDocument3)thisXDocument;
thisXDocument.UI.Alert(thisDoc.Permission.PolicyDescription);</code>
          <code>Dim thisDoc As _XDocument3 = DirectCast(thisXDocument, _XDocument3)
thisXDocument.UI.Alert(thisDoc.Permission.PolicyDescription)</code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="PolicyName">
      <MemberSignature Language="C#" Value="public string PolicyName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PolicyName" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.InfoPath.Permission.PolicyName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PolicyName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ PolicyName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.PolicyName : string" Usage="Microsoft.Office.Interop.InfoPath.Permission.PolicyName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.InfoPath</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(8)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the name of the policy that was applied to the current form.</summary>
        <value>The name of the policy or a default value if no policy was applied.</value>
        <remarks>
          <para>InfoPath supports the use of administrative permission policies which list users and groups and their form permissions.</para>
          <para />
        </remarks>
        <example>
          <para>In the following example, the <b>PolicyName</b> property is used to display the description of the policy that was applied to the current form.</para>
          <code>_XDocument3 thisDoc = (_XDocument3)thisXDocument;
thisXDocument.UI.Alert(thisDoc.Permission.PolicyName);</code>
          <code>Dim thisDoc As _XDocument3 = DirectCast(thisXDocument, _XDocument3)
thisXDocument.UI.Alert(thisDoc.Permission.PolicyName)</code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="RemoveAll">
      <MemberSignature Language="C#" Value="public void RemoveAll ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveAll() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.InfoPath.Permission.RemoveAll" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAll ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveAll();" />
      <MemberSignature Language="F#" Value="abstract member RemoveAll : unit -&gt; unit" Usage="permission.RemoveAll " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.InfoPath</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(5)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Removes all <see cref="T:Microsoft.Office.Interop.InfoPath.UserPermission" /> objects associated with the form.</summary>
        <remarks>To be added.</remarks>
        <example>
          <para>In the following example, the <b>RemoveAll</b> method is used to remove all users from the form.</para>
          <code>_XDocument3 thisDoc = (_XDocument3)thisXDocument;
thisDoc.Permission.RemoveAll();</code>
          <code>Dim thisDoc As _XDocument3 = DirectCast(thisXDocument, _XDocument3)
thisDoc.Permission.RemoveAll()</code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="RequestPermissionURL">
      <MemberSignature Language="C#" Value="public string RequestPermissionURL { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string RequestPermissionURL" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.InfoPath.Permission.RequestPermissionURL" />
      <MemberSignature Language="VB.NET" Value="Public Property RequestPermissionURL As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ RequestPermissionURL { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.RequestPermissionURL : string with get, set" Usage="Microsoft.Office.Interop.InfoPath.Permission.RequestPermissionURL" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.InfoPath</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(7)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(7)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(7)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the file, URL, or e-mail address to contact for users who need additional permissions on the current form. </summary>
        <value>The string specified in the Users can request additional permissions from text box of the Permission dialog box in InfoPath design mode, or the value set from code using this property.</value>
        <remarks>
          <para>The <b>RequestPermissionUrl</b> property corresponds to the value specified in the Users can request additional permissions from text box in the Design mode user interface. Use the <b>RequestPermissionUrl</b> property to specify a file, a Web site, or an e-mail contact from which users can request, or learn how to request, additional permissions on the active form. For example:</para>
          <list type="bullet">
            <item>
              <description>A web address: http://companyserver/request_permissions.asp</description>
            </item>
            <item>
              <description>A file: \\companyserver\share\requesting_permissions.txt</description>
            </item>
            <item>
              <description>An e-mail address: mailto:permissionsmrg@example.com?Subject=Request%20permissions</description>
            </item>
          </list>
          <para />
        </remarks>
        <example>
          <para>In the following example, the <b>RequestPermissionURL</b> property is used to display the URL or e-mail address to contact for additional permissions..</para>
          <code>_XDocument3 thisDoc = (_XDocument3)thisXDocument;
thisXDocument.UI.Alert(thisDoc.Permission.RequestPermissionURL);</code>
          <code>Dim thisDoc As _XDocument3 = DirectCast(thisXDocument, _XDocument3)
thisXDocument.UI.Alert(thisDoc.Permission.RequestPermissionURL)</code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="StoreLicenses">
      <MemberSignature Language="C#" Value="public bool StoreLicenses { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool StoreLicenses" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.InfoPath.Permission.StoreLicenses" />
      <MemberSignature Language="VB.NET" Value="Public Property StoreLicenses As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool StoreLicenses { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.StoreLicenses : bool with get, set" Usage="Microsoft.Office.Interop.InfoPath.Permission.StoreLicenses" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.InfoPath</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(10)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(10)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(10)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets whether the user's license to view the current form should be cached to allow offline viewing when the user cannot connect to a rights management server.</summary>
        <value>
          <b>true</b> if the user's license will be cached for offline viewing; otherwise <b>false</b>.</value>
        <remarks>
          <para>Corresponds to the setting of the Require a connection to verify a user's permission check box in the Permission dialog box. If the setting of the <b>StoreLicences</b> property is <b>true</b>, the check box is cleared and a user's license is cached locally. If the setting is <b>false</b>, the check box is selected and users other than the form owner must connect to the rights management server and acquire the license to work with the form each time they open it.</para>
          <para />
        </remarks>
        <example>
          <para>In the following example, the <b>StoreLicenses</b> property is set to <b>false</b>, and then current value of the property is displayed.</para>
          <code>_XDocument3 thisDoc = (_XDocument3)thisXDocument;
thisDoc.Permission.StoreLicenses = false;
thisXDocument.UI.Alert(this.Permission.StoreLicenses.ToString());</code>
          <code>Dim thisDoc As _XDocument3 = DirectCast(thisXDocument, _XDocument3)
thisDoc.Permission.StoreLicenses = False
thisXDocument.UI.Alert(Me.Permission.StoreLicenses.ToString())</code>
        </example>
      </Docs>
    </Member>
  </Members>
</Type>