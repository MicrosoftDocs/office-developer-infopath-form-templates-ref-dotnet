<Type Name="MailEnvelope2" FullName="Microsoft.Office.Interop.InfoPath.MailEnvelope2">
  <TypeSignature Language="C#" Value="public interface MailEnvelope2 : Microsoft.Office.Interop.InfoPath.MailEnvelope" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract MailEnvelope2 implements class Microsoft.Office.Interop.InfoPath.MailEnvelope" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Office.Interop.InfoPath.MailEnvelope2" />
  <TypeSignature Language="VB.NET" Value="Public Interface MailEnvelope2&#xA;Implements MailEnvelope" />
  <TypeSignature Language="C++ CLI" Value="public interface class MailEnvelope2 : Microsoft::Office::Interop::InfoPath::MailEnvelope" />
  <TypeSignature Language="F#" Value="type MailEnvelope2 = interface&#xA;    interface MailEnvelope" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Office.Interop.InfoPath</AssemblyName>
    <AssemblyVersion>15.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.Office.Interop.InfoPath.MailEnvelope</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.Guid("096CD6FC-0786-11D1-95FA-0080C78EE3BB")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.TypeLibType(4288)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>This type is a wrapper for a COM interface implemented by a coclass that is required by managed code for COM interoperability. To access the members specified by this interface, use the type that wraps the coclass that implements this interface. For information about that type, including usage, remarks, and examples, see<see cref="T:Microsoft.Office.Interop.InfoPath.MailEnvelopeObject" />.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="AttachmentType">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.InfoPath.XdAttachmentType AttachmentType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.Office.Interop.InfoPath.XdAttachmentType AttachmentType" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.InfoPath.MailEnvelope2.AttachmentType" />
      <MemberSignature Language="VB.NET" Value="Public Property AttachmentType As XdAttachmentType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::InfoPath::XdAttachmentType AttachmentType { Microsoft::Office::Interop::InfoPath::XdAttachmentType get(); void set(Microsoft::Office::Interop::InfoPath::XdAttachmentType value); };" />
      <MemberSignature Language="F#" Value="member this.AttachmentType : Microsoft.Office.Interop.InfoPath.XdAttachmentType with get, set" Usage="Microsoft.Office.Interop.InfoPath.MailEnvelope2.AttachmentType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.InfoPath</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(6)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(6)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(6)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.InfoPath.XdAttachmentType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the type of file to be attached to the e-mail message.</summary>
        <value>An <see cref="T:Microsoft.Office.Interop.InfoPath.XdAttachmentType" /> that specifies the type of file that is attached to the e-mail message.</value>
        <remarks>
          <para>Set to <b>XdAttachmentType.xdXml</b> to send only the form file (.xml). Set to <b>XdAttachmentType.xdXmlXsn</b> to send the form file (.xml) along with its associated form template file (.xsn).</para>
          <para />
        </remarks>
        <example>
          <para>The following example sets a reference to the <b>MailEnvelope2</b> object, sets envelope properties, and then displays the e-mail envelope.</para>
          <code>MailEnvelope2 myEnv = 
   (MailEnvelope2)thisApplication.ActiveWindow.MailEnvelope;
myEnv.To = "someone@example.com";
myEnv.&lt;span class="label"&gt;CC&lt;/span&gt; = "someone@example.com";
myEnv.BCC = "someone@example.com";
myEnv.Subject = "Test e-mail message";
myEnv.Intro = "This is the InfoPath form you requested.";
myEnv.&lt;span class="label"&gt;AttachmentType&lt;/span&gt; = XdAttachmentType.xdXmlXsn;

// Display form with e-mail envelope.
myEnv.Visible = true;</code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="Available">
      <MemberSignature Language="C#" Value="public bool Available { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Available" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.InfoPath.MailEnvelope2.Available" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Available As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Available { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.Available : bool" Usage="Microsoft.Office.Interop.InfoPath.MailEnvelope2.Available" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.InfoPath</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(8)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets whether the other properties of the <see cref="T:Microsoft.Office.Interop.InfoPath.MailEnvelope2" /> object are available to code running in the form.</summary>
        <value>
          <b>true</b> if the other properties of the <see cref="T:Microsoft.Office.Interop.InfoPath.MailEnvelope2" /> object are available to code running in the form; otherwise <b>false</b>.</value>
        <remarks>
          <para>The <b>Available</b> property is use to test whether the form is open in Microsoft Outlook 2010. If a form is sent as an e-mail attachment to a user running Microsoft Outlook 2010, the form will open within Outlook. In this context, it is not appropriate to programmatically create an e-mail message for attaching and sending the currently open InfoPath form because the form and e-mail message to which it is attached are already open in Outlook, and the <b>Available</b> property will return <b>false</b>. If the form is opened in InfoPath, the <b>Available</b> property will return <b>true</b> and form code can use the properties of the <b>MailEnvelope2</b> object.</para>
          <para />
        </remarks>
        <example>
          <para>The following example sets a reference to the <b>MailEnvelopeObject</b> object, uses the <b>Available</b> property to determine if the form is open Microsoft Outlook 2010, and if so, in sets envelope properties, and then displays the e-mail envelope.</para>
          <code>// Set a reference to the MailEnvelope2 object.
MailEnvelope2 myEnv = 
   (MailEnvelope2)thisApplication.ActiveWindow.MailEnvelope;
if (myEnv.&lt;span class="label"&gt;Available)&lt;/span&gt;
{
   // Specify addresses and subject.
   myEnv.To = "someone@example.com";
   myEnv.CC = "someone@example.com";
   myEnv.BCC = "someone@example.com";
   myEnv.Subject = "Open this form";

   // Display form with e-mail envelope.
   myEnv.Visible = true;
}
else
{
   // The form is open in Outlook, and code will not run.
   thisXDocument.UI.Alert("This form is open in Outlook.");
}</code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="BCC">
      <MemberSignature Language="C#" Value="public string BCC { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string BCC" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.InfoPath.MailEnvelope2.BCC" />
      <MemberSignature Language="VB.NET" Value="Public Property BCC As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ BCC { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.BCC : string with get, set" Usage="Microsoft.Office.Interop.InfoPath.MailEnvelope2.BCC" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.Office.Interop.InfoPath.MailEnvelope.BCC</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.InfoPath</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(1)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(1)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the blind carbon copy (BCC) value used in <see cref="T:Microsoft.Office.Interop.InfoPath.MailEnvelopeObject" /> that is associated with a <see cref="T:Microsoft.Office.Interop.InfoPath.WindowObject" /> object.</summary>
        <value>The blind carbon copy (BCC) addresses.</value>
        <remarks>
          <para>The values set for the <b>BCC</b> property should be a string of valid e-mail addresses. You can specify multiple e-mail addresses by using a semi-colon (";") between each of them.</para>
          <para />
        </remarks>
        <example>
          <code>MailEnvelopeObject myEnv = thisApplication.ActiveWindow.MailEnvelope;
myEnv.To = "someone@example.com";
myEnv.CC = "someone@example.com";
myEnv.&lt;span class="label"&gt;BCC&lt;/span&gt; = "someone@example.com";
myEnv.Subject = "Test e-mail message";</code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="CC">
      <MemberSignature Language="C#" Value="public string CC { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CC" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.InfoPath.MailEnvelope2.CC" />
      <MemberSignature Language="VB.NET" Value="Public Property CC As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ CC { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CC : string with get, set" Usage="Microsoft.Office.Interop.InfoPath.MailEnvelope2.CC" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.Office.Interop.InfoPath.MailEnvelope.CC</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.InfoPath</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(2)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(2)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the carbon copy (CC) value used in the <see cref="T:Microsoft.Office.Interop.InfoPath.MailEnvelopeObject" /> object that is associated with a <see cref="T:Microsoft.Office.Interop.InfoPath.WindowObject" /> object.</summary>
        <value>The carbon copy (CC) addresses.</value>
        <remarks>
          <para>The values set for the <b>CC</b> property should be a string of valid e-mail addresses. You can specify multiple e-mail addresses by using a semi-colon (";") between each of them.</para>
          <para />
        </remarks>
        <example>
          <code>MailEnvelopeObject myEnv = thisApplication.ActiveWindow.MailEnvelope;
myEnv.To = "someone@example.com";
myEnv.&lt;span class="label"&gt;CC&lt;/span&gt; = "someone@example.com";
myEnv.BCC = "someone@example.com";
myEnv.Subject = "Test e-mail message";</code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="Intro">
      <MemberSignature Language="C#" Value="public string Intro { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Intro" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.InfoPath.MailEnvelope2.Intro" />
      <MemberSignature Language="VB.NET" Value="Public Property Intro As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Intro { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Intro : string with get, set" Usage="Microsoft.Office.Interop.InfoPath.MailEnvelope2.Intro" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.InfoPath</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(7)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(7)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(7)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the introduction in the body of the e-mail message.</summary>
        <value>The introduction in the body of the e-mail message.</value>
        <remarks>To be added.</remarks>
        <example>
          <para>The following example sets a reference to the <b>MailEnvelope2</b> object, sets envelope properties, and then displays the e-mail envelope.</para>
          <code>MailEnvelope2 myEnv = 
   (MailEnvelope2)thisApplication.ActiveWindow.MailEnvelope;
myEnv.To = "someone@example.com";
myEnv.&lt;span class="label"&gt;CC&lt;/span&gt; = "someone@example.com";
myEnv.BCC = "someone@example.com";
myEnv.Subject = "Test e-mail message";
myEnv.&lt;span class="label"&gt;Intro&lt;/span&gt; = "This is the InfoPath form you requested.";

// Display form with e-mail envelope.
myEnv.Visible = true;</code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="Subject">
      <MemberSignature Language="C#" Value="public string Subject { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Subject" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.InfoPath.MailEnvelope2.Subject" />
      <MemberSignature Language="VB.NET" Value="Public Property Subject As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Subject { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Subject : string with get, set" Usage="Microsoft.Office.Interop.InfoPath.MailEnvelope2.Subject" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.Office.Interop.InfoPath.MailEnvelope.Subject</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.InfoPath</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(3)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(3)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(3)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the subject value used in the <see cref="T:Microsoft.Office.Interop.InfoPath.MailEnvelopeObject" /> object that is associated with a <see cref="T:Microsoft.Office.Interop.InfoPath.WindowObject" /> object.</summary>
        <value>The subject line.</value>
        <remarks>
          <para>The <b>MailEnvelope</b> object does not support the programmatic creation of the body of an e-mail message. Users enter the body text after the e-mail message is displayed in Microsoft Outlook.</para>
          <para />
        </remarks>
        <example>
          <code>MailEnvelopeObject myEnv = thisApplication.ActiveWindow.MailEnvelope;
myEnv.To = "someone@example.com";
myEnv.CC = "someone@example.com";
myEnv.BCC = "someone@example.com";
myEnv.&lt;span class="label"&gt;Subject&lt;/span&gt; = "Test e-mail message";</code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="To">
      <MemberSignature Language="C#" Value="public string To { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string To" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.InfoPath.MailEnvelope2.To" />
      <MemberSignature Language="VB.NET" Value="Public Property To As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ To { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.To : string with get, set" Usage="Microsoft.Office.Interop.InfoPath.MailEnvelope2.To" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.Office.Interop.InfoPath.MailEnvelope.To</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.InfoPath</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(4)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(4)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(4)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the send-to value used in the <see cref="T:Microsoft.Office.Interop.InfoPath.MailEnvelopeObject" /> object that is associated with a <see cref="T:Microsoft.Office.Interop.InfoPath.WindowObject" /> object.</summary>
        <value>The recipient (To) addresses.</value>
        <remarks>
          <para>The values set for the <b>To</b> property should be a string of valid e-mail addresses. You can specify multiple e-mail addresses by using a semi-colon (";") between each of them.</para>
          <para />
        </remarks>
        <example>
          <code>MailEnvelopeObject myEnv = thisApplication.ActiveWindow.MailEnvelope;
myEnv.&lt;span class="label"&gt;To&lt;/span&gt; = "someone@example.com";
myEnv.CC = "someone@example.com";
myEnv.BCC = "someone@example.com";
myEnv.Subject = "Test e-mail message";</code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="Visible">
      <MemberSignature Language="C#" Value="public bool Visible { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Visible" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.InfoPath.MailEnvelope2.Visible" />
      <MemberSignature Language="VB.NET" Value="Public Property Visible As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Visible { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Visible : bool with get, set" Usage="Microsoft.Office.Interop.InfoPath.MailEnvelope2.Visible" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.Office.Interop.InfoPath.MailEnvelope.Visible</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.InfoPath</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(5)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(5)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(5)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the visibility of the custom e-mail message created with a <see cref="T:Microsoft.Office.Interop.InfoPath.MailEnvelopeObject" /> object that is associated with a <see cref="T:Microsoft.Office.Interop.InfoPath.WindowObject" /> object.</summary>
        <value>
          <b>true</b> if the envelope is visible; otherwise <b>false</b>.</value>
        <remarks>
          <para>When the <b>Visible</b> property of the <b>MailEnvelope</b> object is set to <b>true</b>, the custom e-mail message will be displayed using Microsoft Office Outlook 2003. If there is no default e-mail editor configured, the <b>Visible</b> property will return an error.</para>
          <para />
        </remarks>
        <example>
          <para>In the following example, the <b>Visible</b> property of the <b>MailEnvelope</b> object is used to display an e-mail message in Microsoft Office Outlook 2003:</para>
          <code>MailEnvelopeObject myEnv = thisApplication.ActiveWindow.MailEnvelope;
myEnv.&lt;span class="label"&gt;Visible&lt;/span&gt; = true;</code>
        </example>
      </Docs>
    </Member>
  </Members>
</Type>
