<Type Name="HTMLTaskPaneObject" FullName="Microsoft.Office.Interop.InfoPath.HTMLTaskPaneObject">
  <TypeSignature Language="C#" Value="public interface HTMLTaskPaneObject : Microsoft.Office.Interop.InfoPath.HTMLTaskPane" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract HTMLTaskPaneObject implements class Microsoft.Office.Interop.InfoPath.HTMLTaskPane" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Office.Interop.InfoPath.HTMLTaskPaneObject" />
  <TypeSignature Language="VB.NET" Value="Public Interface HTMLTaskPaneObject&#xA;Implements HTMLTaskPane" />
  <TypeSignature Language="C++ CLI" Value="public interface class HTMLTaskPaneObject : Microsoft::Office::Interop::InfoPath::HTMLTaskPane" />
  <TypeSignature Language="F#" Value="type HTMLTaskPaneObject = interface&#xA;    interface HTMLTaskPane" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Office.Interop.InfoPath</AssemblyName>
    <AssemblyVersion>15.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.Office.Interop.InfoPath.HTMLTaskPane</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.Office.Interop.InfoPath.TaskPane</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.CoClass(typeof(Microsoft.Office.Interop.InfoPath.HTMLTaskPaneObjectClass))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.Guid("096CD548-0786-11D1-95FA-0080C78EE3BB")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Represents a custom task pane in a Microsoft InfoPath form that is associated with a window.</summary>
    <remarks>
      <para>This type is a wrapper for a coclass that is required by managed code for COM interoperability. Use this type to access the members of the COM interface implemented by this coclass. For information about the COM interface, including a link to descriptions of its members, see<see cref="T:Microsoft.Office.Interop.InfoPath.HTMLTaskPane" />.</para>
      <para>The <b>HTMLTaskPane</b> object provides a number of properties and methods for working with the InfoPath custom task pane, and it provides properties and methods of the <see cref="T:Microsoft.Office.Interop.InfoPath.TaskPaneObject" /> object.</para>
      <para>The properties and methods that are available for an InfoPath task pane are determined by the type of task pane that you are working with. If the <see cref="P:Microsoft.Office.Interop.InfoPath.HTMLTaskPane.TaskPaneType" /> property returns 0, the task pane is a custom task pane and the properties and methods that are available are provided by the <b>HTMLTaskPane</b> object. If the <b>TaskPaneType</b> property returns any other value, the task pane is a built-in task pane and the properties are provided by the <b>TaskPane</b> object.</para>
      <para>The <b>TaskPaneType</b> property is based on the <see cref="T:Microsoft.Office.Interop.InfoPath.XdTaskPaneType" /> enumeration. These enumerated values are also used as arguments to the <see cref="P:Microsoft.Office.Interop.InfoPath.TaskPanes.Item(System.Object)" /> property of the <see cref="T:Microsoft.Office.Interop.InfoPath.TaskPanesCollection" /> collection for returning a reference to a specified type of task pane.</para>
      <para>
        <b>Note</b>: The properties and methods of the <b>HTMLTaskPane</b> object cannot be called during an <see cref="T:Microsoft.Office.Interop.InfoPath._XDocumentEventSink2_OnLoadEventHandler" /> event because the view is not yet loaded when this event occurs, and task panes are associated with the view.</para>
      <para />
    </remarks>
    <example>
      <para>In the following example, the P:Microsoft.Office.Interop.InfoPath.TaskPanes.Item(System.Object) property of the T:Microsoft.Office.Interop.InfoPath.TaskPanesCollection collection is used to get a reference to the T:Microsoft.Office.Interop.InfoPath.TaskPaneObject object that represents the custom task pane. The code then calls the <see cref="M:Microsoft.Office.Interop.InfoPath.HTMLTaskPane.Navigate(System.String)" /> method of the <b>HTMLTaskPane</b> object to open an HTML file.</para>
      <code>public void CustomTaskPaneNavigation()
{
 // Get a reference to the custom task pane. It is always index [0] in the TaskPanes collection.   
 &lt;span class="label"&gt;HTMLTaskPane&lt;/span&gt; oTaskPane = (HTMLTaskPane)thisXDocument.View.Window.TaskPanes[0];

 // Navigate based on url specified.
 oTaskPane.Navigate("taskpane2.html");
}</code>
      <para>In the following example, the <see cref="P:Microsoft.Office.Interop.InfoPath.TaskPanes.Item(System.Object)" /> property of the <see cref="T:Microsoft.Office.Interop.InfoPath.TaskPanesCollection" /> collection is used to get a reference to the <see cref="T:Microsoft.Office.Interop.InfoPath.TaskPaneObject" /> object that represents the custom task pane. The code then calls a scripting function defined in the HTML code of the custom task pane using the <see cref="P:Microsoft.Office.Interop.InfoPath.HTMLTaskPane.HTMLDocument" /> property of the <b>HTMLTaskPane</b> object, which is inherited by the <b>TaskPane</b> object.</para>
      <code>// Ensure View has loaded before trying to access the task pane.
if (thisXDocument.View != null)
{
 // Get a reference to the custom task pane.  It is always the 0-th
 // task pane in the TaskPanes collection.
 &lt;span class="label"&gt;HTMLTaskPane&lt;/span&gt; custom = (HTMLTaskPane) thisXDocument.View.Window.TaskPanes[0];

 // Ensure that the task pane is completely loaded.
 if (custom != null &amp;amp;&amp;amp; custom.HTMLDocument.readyState == "complete")
 {
  mshtml.IHTMLWindow2 window = custom.HTMLDocument.parentWindow;

  object[] args =  new object[] {"ViewID"};

  // call into script through CLR late binding mechanism
  window.GetType().InvokeMember(
   "SelectView",      // late bound method      
   System.Reflection.BindingFlags.InvokeMethod |   // binding flags
   System.Reflection.BindingFlags.DeclaredOnly | 
   System.Reflection.BindingFlags.Public | 
   System.Reflection.BindingFlags.Instance,     
   null,        // binder object
   window,        // target object
   args);
 }
}</code>
    </example>
  </Docs>
  <Members />
</Type>
